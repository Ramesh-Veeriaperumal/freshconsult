  build = env.BUILD_NUMBER
  buildno = build.toInteger()
  label = "label"
  if ( buildno%2 == 0 ){
    label = params.LABEL1
  }else {
    label = params.LABEL2
  }
               
node(params.LABEL1) {
      def tasks = [:]
      tasks["Backend Falcon Unit Tests"] = {
        stage ("Private API Tests"){ 
          build job: 'prestaging-falcon-unit-integration-acceptance-tests-backend-pipeline', 
          parameters: [string(name: 'NODE', value: label),string(name: 'BRANCH',value: "$params.sha1"),string(name: 'PIPELINE_BRANCH',value: "$params.ghprbSourceBranch")]
        }
      }
      tasks["Backend Falcon Public API Tests"] = {
        stage ("Public API Tests"){
          build job: 'prestaging-falcon-public-api-unit-integration-acceptance-tests-backend-pipeline', 
          parameters: [string(name: 'NODE', value: label),string(name: 'BRANCH',value: "$params.sha1"),string(name: 'PIPELINE_BRANCH',value: "$params.ghprbSourceBranch")]
        }
      }
      tasks["Pronto Code Review"] = {
        stage ("Pronto Code Review"){
          build job: 'prestaging-pronto-codereview-pipeline', 
          parameters: [string(name: 'NODE', value: params.LABEL3),string(name: 'BRANCH',value: "$params.ghprbSourceBranch"),string(name: 'PULLID',value: "$params.ghprbPullId"),string(name: 'PIPELINE_BRANCH',value: "$ghprbSourceBranch")]
        }
      }
      tasks["Backend Falcon Sandbox Unit Tests"] = {
        stage ("Trigger Job"){
          build job: 'prestaging-falcon-sandbox-tests-backend-pipeline',
          parameters: [string(name: 'NODE', value: label),string(name: 'BRANCH',value: "$params.sha1"),string(name: 'PIPELINE_BRANCH',value: "$params.ghprbSourceBranch")]
        }
      }
     parallel tasks
}
