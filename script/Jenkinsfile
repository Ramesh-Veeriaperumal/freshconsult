import groovy.json.JsonSlurperClassic

 //Assinging variable
 jobName = env.JOB_NAME



//Specfiy the branch to checkout based on PR condition
def branch_checkout() {

           try {
	                    checkout ([$class: 'GitSCM', branches: [[name: "$params.ghprbSourceBranch"]],
                        browser: [$class: 'GithubWeb', repoUrl: 'https://github.com/freshdesk/helpkit.git'],
                        doGenerateSubmoduleConfigurations: false,extensions: [[$class: 'PreBuildMerge',
                        options: [fastForwardMode: 'FF', mergeRemote: 'origin', mergeStrategy: 'default', mergeTarget: "$params.ghprbTargetBranch"]]],
                        submoduleCfg: [], userRemoteConfigs: [[credentialsId: '371ebd17-e4d3-44e1-bfa3-70f99ee904b5',url: 'https://github.com/freshdesk/helpkit.git']]])
           
	            }//If Merge Conflict Occurs build will fail with below message

		       catch (e) {
		               
		                //branch = params.BRANCH
               checkout([$class: 'GitSCM', branches: [[name: params.BRANCH]], doGenerateSubmoduleConfigurations: false,
                         extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '371ebd17-e4d3-44e1-bfa3-70f99ee904b5',url: 'https://github.com/freshdesk/helpkit.git']]])
                         
		        }

}


//Build setup based on category
def build_setup(category) {

        sh  """#!/bin/bash
	        source /etc/profile.d/rvm.sh
	        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
	        yes | cp -rf /home/jenkins/s3.yml /home/jenkins/workspace/$jobName/config/s3.yml
	        yes | cp -rf /home/jenkins/redis.yml /home/jenkins/workspace/$jobName/config/redis.yml
	        yes | cp -rf /home/jenkins/elasticsearch.yml /home/jenkins/workspace/$jobName/config/elasticsearch.yml
	        yes | cp -rf /home/jenkins/channel_api_keys.yml /home/jenkins/workspace/$jobName/config/channel_api_keys.yml
	        sudo service mysql start
	        sudo service elasticsearch start
            export CODECOV_TOKEN="${params.CODECOV_TOKEN}"
	      	"""

	    if(category != 'private' && category != 'public') {

	      sh  """#!/bin/bash
		      source /etc/profile.d/rvm.sh
		      redis-server --daemonize yes
		      bundle install
	          bundle exec rake db:bootstrap RAILS_ENV=test
	      	  """
	      }


	    if(category == 'sandbox')  {

	     sh '''#!/bin/bash
	        source /etc/profile.d/rvm.sh
	        echo "create database sandbox${BUILD_NUMBER}" | mysql -uroot
            sed -i "s/sandbox_test/sandbox${BUILD_NUMBER}/g" config/database.yml
	        bundle exec rake db:sandbox_shard_setup RAILS_ENV=test
            mkdir tmp/sandbox_test
            git init tmp/sandbox_test/
            git config --global user.email "sample@freshdesk.com"
            git config --global user.name "Sample"
            '''
	     }

}


//Execute testCases
def execute_test_cases(category) {

        if(category == 'pronto') {
            sh """#!/bin/bash
               source /etc/profile.d/rvm.sh
               bundle install
               PRONTO_GITHUB_ACCESS_TOKEN=01e7bb24ab7efd8415542b6ecf6767385a9e89e4 PRONTO_PULL_REQUEST_ID=$params.ghprbPullId pronto run -f github_status github_pr -c origin/$params.ghprbTargetBranch
               """
        }

        if(category == 'public') {
           sh '''#!/bin/bash
              source /etc/profile.d/rvm.sh
              ruby test/parallel_test.rb 3 public
              '''
        }

        if(category == 'private') {
           sh '''#!/bin/bash
              source /etc/profile.d/rvm.sh
              ruby test/parallel_test.rb 5 private
              '''
        }

        if(category == 'sandbox') {
           sh '''#!/bin/bash
              source /etc/profile.d/rvm.sh
              bundle exec ruby test/api/suites/sandbox_test_suite.rb
              '''
        }

}

//Publish Reports
def publish_report(category) {

                 publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true,
		                             reportDir: '/home/jenkins/workspace/${JOB_NAME}/tmp/coverage', reportFiles: 'index.html',
		                             reportName: "coverage $category", reportTitles: ''])

		         junit allowEmptyResults: true, testResults: 'test/api/reports/*.xml'

}

//Distribted run based on category
def distributed_run(category) {

   timestamps {
   
	 //Machine label where this jobs needs to run
	 node("spot_backend") {


	 //Image name where this job has to run
	       docker.image('792634465463.dkr.ecr.us-east-1.amazonaws.com/fdesk/backend').inside {
       
		    //Checkout stage
		    	stage(category + " Tests") {

					    //Branch checkout
					  if(jobName.contains("pullrequest")) {
                         branch_checkout()
					   }else{
					       checkout scm
					   }


					    //Build setup
					    if(category != 'pronto') {
			    			//Intialization process
			            	build_setup(category)
			    		}

			    	     //Executing test cases
	                     try{
				               execute_test_cases(category)
				         }
				         catch (e) {
				               "issue with test execution" + e
				         }

			    		 finally {
				    		if(category != 'pronto') {
				    		     //Publish Report
						            publish_report(category)
				    		}
				         }
                  }
           }       
	   }
    }
 }


//Parallel Test starts here
parallel Public: {
       distributed_run("public");
},Private: {
       distributed_run("private");
},Sandbox: {
       distributed_run("sandbox");
},Pronto: {
       distributed_run("pronto");
}


//Ends results published here
timestamps {
	     //Machine label where this jobs needs to run
		 node("master") {
		 	junit allowEmptyResults: true, testResults: 'test/api/reports/*.xml'
		 }
}
