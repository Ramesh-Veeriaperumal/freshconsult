//Assinging neccessary variables
//def pullId       = params.ghprbPullId
//def sourceBranch = params.ghprbSourceBranch
//def targetBranch = params.ghprbTargetBranch

 pullId       = "2477"
 sourceBranch = "pipeline-enchancement"
 targetBranch = "falcon-prestaging"


 jobName = env.JOB_NAME 
 build   = env.BUILD_NUMBER
 buildno = build.toInteger()
 label = "";
  
if( buildno % 2 == 0 ){
     label = "backend_spot_1"
}else {
     label = "backend_spot_2"
}


//Specfiy the branch to checkout based on condition
def branch_checkout(category) {
        
     if(category=='pronto') {
            checkout([$class: 'GitSCM', branches: [[name: sourceBranch]],
                            doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [],
                            userRemoteConfigs: [[url: 'git@github.com:freshdesk/helpkit.git']]])
     }else {
                     
          checkout([$class: 'GitSCM', branches: [[name: sourceBranch]],
                            doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [],
                            userRemoteConfigs: [[name: 'origin',refspec: '+refs/pull/*:refs/remotes/origin/pr/*',
                            url: 'git@github.com:freshdesk/helpkit.git']]])             
     }

}


//Build setup based on category 
def build_setup(category) {
        
        sh  """#!/bin/bash
	        source /etc/profile.d/rvm.sh
	        yes | cp -rf /home/jenkins/s3.yml /home/jenkins/workspace/$jobName/config/s3.yml
	        yes | cp -rf /home/jenkins/redis.yml /home/jenkins/workspace/$jobName/config/redis.yml
	        yes | cp -rf /home/jenkins/elasticsearch.yml /home/jenkins/workspace/$jobName/config/elasticsearch.yml
	        yes | cp -rf /home/jenkins/channel_api_keys.yml /home/jenkins/workspace/$jobName/config/channel_api_keys.yml
	        sudo service mysql start
	        sudo service elasticsearch start
	        sudo service postgresql start
	        redis-server --daemonize yes
	        bundle install
	      	"""
	      	
	    if(category == 'public' || category == 'private')  {
	
	     sh '''#!/bin/bash
	        source /etc/profile.d/rvm.sh 
            bundle exec rake db:bootstrap RAILS_ENV=test
            '''   
	     }
	     
	    if(category == 'sandbox')  {
	
	     sh '''#!/bin/bash
	        source /etc/profile.d/rvm.sh 
	        bundle exec rake db:sandbox_shard_setup RAILS_ENV=test
            mkdir tmp/sandbox_test
            git init tmp/sandbox_test/
            git config --global user.email "sample@freshdesk.com"
            git config --global user.name "Sample"
            '''   
	     }
 	
	      	
        
}


//Execute testCases 
def execute_test_cases(category) {
        
        if(category == 'pronto') {
            sh """#!/bin/bash
               source /etc/profile.d/rvm.sh
               bundle install
               PRONTO_GITHUB_ACCESS_TOKEN=01e7bb24ab7efd8415542b6ecf6767385a9e89e4 PRONTO_PULL_REQUEST_ID=$pullId pronto run -f github_status github_pr -c origin/$targetBranch
               """
        }
        
        if(category == 'public') {
           sh '''#!/bin/bash
              source /etc/profile.d/rvm.sh
              bundle exec ruby test/api/suites/public_api_test_suite.rb
              '''
        }
        
        if(category == 'private') {
           sh '''#!/bin/bash
              source /etc/profile.d/rvm.sh
              bundle exec ruby test/api/suites/falcon_test_suite.rb
              '''
        }
        
        if(category == 'sandbox') {
           sh '''#!/bin/bash
              source /etc/profile.d/rvm.sh
              bundle exec ruby test/api/suites/sandbox_test_suite.rb
              '''
        }
        
}

//Publish Reports
def publish_report(category) {
        
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false,
                             reportDir: '/home/jenkins/workspace/${JOB_NAME}/tmp/coverage', reportFiles: 'index.html',
                             reportName: "coverage $category", reportTitles: ''])
}


def distributed_run(category) {
        
   timestamps {     
	     //Machine label where this jobs needs to run
		 node(label) {
		 
		    //Checkout stage
		    	stage("checkout for "+category) {
				    branch_checkout(category)
				}
				
		   if(category != 'pronto') {		
		    //Intialization process
		        stage("Build for "+category) {
		            build_setup(category)
		        }
		    }     
				
			//Execute Testcases 
			    stage("Execute Testcases for "+category) {
		             execute_test_cases(category)
			    }
			    
			if(category != 'pronto') {
             //Publish Report    
			    stage("Publish Report for "+category) {
			          publish_report(category)                        
			    }           

		    }
 
        }	
   }	 
}


parallel Public: {
       distributed_run("public");
},Private: {
       distributed_run("private");
},Sandbox: {
       distributed_run("sandbox");
},Pronto: {
       distributed_run("pronto");
}


//Ends results published here
timestamps {     
	     //Machine label where this jobs needs to run
		 node("master") {
		 	junit allowEmptyResults: true, testResults: 'test/api/reports/*.xml'		    
		 }	
}	 



