#!/usr/bin/env ruby
require 'rubygems'
require 'lockfile'

Lockfile('lock', :retries => 0) do
  require File.dirname(__FILE__) + '/../config/boot'
  require File.dirname(__FILE__) + '/../config/environment'
  
  
  
  unless RAILS_ENV == "staging"
  
  puts "The subscription script file is running "
   
  Subscription.find_expiring_trials.each do |sub|
    begin 
    	puts "Account admin email is #{sub.account.account_admin.email}"
    	if admin = sub.account.account_admin
      		SubscriptionNotifier.deliver_trial_expiring(admin, sub, "#{sub.trial_days} days")
    	end
   	rescue Exception => err
   	 SubscriptionNotifier.deliver_sub_error({:error_msg => err.message, :full_domain => sub.account.full_domain, :custom_message => "7 days Email" })
   	end
  end
  
  Subscription.find_expiring_trials(48.hours.from_now).each do |sub|
    begin
    	puts "Two day admin email is #{sub.account.account_admin.email}"
    	if admin = sub.account.account_admin
      		SubscriptionNotifier.deliver_trial_expiring(admin, sub, "48 hours")
    	end
    rescue Exception => err
   	 SubscriptionNotifier.deliver_sub_error({:error_msg => err.message, :full_domain => sub.account.full_domain, :custom_message => "48 hours Email" })
   	end
  end
  
  Subscription.find_expiring_trials(24.hours.from_now).each do |sub|
  	begin
    	puts "One day admin email is #{sub.account.account_admin.email}"
    	if admin = sub.account.account_admin
      		SubscriptionNotifier.deliver_trial_expiring(admin, sub, "24 hours")
    	end
    rescue Exception => err
   	 SubscriptionNotifier.deliver_sub_error({:error_msg => err.message, :full_domain => sub.account.full_domain, :custom_message => "24 hours Email" })
   	end
  end
  
  # Trial subscriptions for which we have payment info.
  # This will always turn up empty unless we are collecting 
  # payment info when creating an account.
  Subscription.find_due_trials.each do |sub|
   begin
    if !sub.charge
      SubscriptionNotifier.deliver_charge_failure(sub)
    end
   rescue Exception => err
   	 SubscriptionNotifier.deliver_sub_error({:error_msg => err.message, :full_domain => sub.account.full_domain, :custom_message => "Trial Charge" })
   end
  end

  Subscription.find_discount_expiry.each do |sub|
    sub.remove_discount
  end

  Subscription.find_due.each do |sub|
  	begin
  		puts "#{sub.account.full_domain}"
    	charge_response = sub.charge
   		puts charge_response
   		if !charge_response
   		 puts "Sending failure notice!"
      	 SubscriptionNotifier.deliver_charge_failure(sub)
    	end
    rescue Exception => err
   	 SubscriptionNotifier.deliver_sub_error({:error_msg => err.message, :full_domain => sub.account.full_domain, :custom_message => "Charge failed" })
   	end
  end

  # Subscriptions overdue for payment (2nd try)
  Subscription.find_due(5.days.ago).each do |sub|
   begin
    if !sub.charge
      SubscriptionNotifier.deliver_charge_failure(sub)
    end
   rescue Exception => err
   	 SubscriptionNotifier.deliver_sub_error({:error_msg => err.message, :full_domain => sub.account.full_domain, :custom_message => "late Charge failed" })
   end
  end
  
  end

end
