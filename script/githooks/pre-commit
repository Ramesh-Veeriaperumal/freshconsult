#!/bin/bash


function validate_test_file() {
FILE=deploy/config/test
if test -f "$FILE"; then
if [[ -z $(grep '[^[:space:]]' $FILE) ]] ; then
  echo "Empty file"
  else
  echo "$FILE not Empty file please pull from falcon-prestaging"
  exit 1
fi
fi
}

function validate_ejson() {
  is_invalid=0
  for f in $(git diff --cached --name-only --diff-filter=ACM -- ./deploy/config/*.ejson)
  do
    tf=$(mktemp)
    git show :${f} > $tf
    ./deploy/config/dynamic_config_util.rb validate --file="$tf"
    if [ $? -ne 0 ]; then
      echo "ERROR: EJSON file $f validation failed"
      is_invalid=1
    fi
    rm -f $tf
  done

  (( is_invalid )) && { echo "ERROR: You have secrets not encrypted, run \"ejson encrypt ./deploy/config/*.ejson\" and try again"; exit 1; }
}


function validate_ruby_files() {
  is_invalid=0
  for f in $(git diff --name-status --staged | grep -v "^D" | sed -e 's/^[MAR]\s*//g' |  egrep "(.erb|.rb)$")
  do
    ruby -c ${f}
     if [ $? -ne 0 ]; then
      echo "ERROR: Ruby syntax validation failed : $f"
      is_invalid=1
    fi
  done

  (( is_invalid )) && { echo "ERROR: You have syntax errors in ruby files.Please fix the errors and try again"; exit 1; }
}

validate_ejson
validate_ruby_files
validate_test_file
#disabling this script 
exit 0;

# This script validates the commit for the following
#   - commit contains a JIRA Id as part of the commit message
#   - commit is not a merge commit on the following branches [ master, staging, prestaging ]
#   - files changed do have any code quality errors as reported by rubocop
#   - cannot commit to rails3-phase2

printMsg(){
  echo "********************************************************"
  echo "$*"
  echo "********************************************************"
}

rubocopOutfile=/tmp/rubocop.githook.tmp
changedFileList=/tmp/changes.githook.tmp
gitDiffFile=/tmp/gitchanges.githook.tmp
changedRubyFiles=/tmp/rubychanges.githook.tmp
changedLinesFile=/tmp/rubychangeslines.githook.tmp
matchingChangesFile=/tmp/matchingchanges.githook.tmp

rm -f /tmp/*.githook.tmp


currentBranch=`git rev-parse --abbrev-ref HEAD`

if [ "$currentBranch" == "falcon-master" \
      -o "$currentBranch" == "falcon-staging"  \
      -o "$currentBranch" == "helpkit-ember" ]
then
  printMsg "You cannot commit directly to $currentBranch.
Please commit to a seperate branch and submit a PR in github."
  exit 1;
fi;

git diff --name-status --staged | grep -v "^D" | sed -e 's/^[MAR]\s*//g' > $changedFileList
cat  $changedFileList | egrep "(.erb|.rb)$" > $changedRubyFiles

cat $changedRubyFiles | xargs git diff -U0 --cached | egrep "^@@|^\+\+\+" > $gitDiffFile

if [ `cat  $changedRubyFiles | wc -l` -eq 0 ]
then
  exit 0;
fi;

#if merge commit then ignore check
if [`git rev-parse -q --verify MERGE_HEAD | wc -c` -gt 1 ]
then
  exit 0;
fi;

command -v osascript &> /dev/null  && osascript -e 'display notification "Running validations for your commit" with title "Please wait"'

while read changes
do
  if [[ "$changes" =~ ^\+\+\+ ]]
  then
    currentFileName=`echo $changes | sed 's,^[^/]*/,,'`
  fi

  if [[ "$changes" =~ ^@@ ]]
  then
    changedLines=`echo $changes |  awk '{ print $3}' | grep "^+" | sed -e 's/+/ /g'`
    changedLineStart=`echo $changedLines | cut -d',' -f1`
    noOfLines=`echo $changedLines | awk -F',' '{ print $2}'`
    currentLine=$changedLineStart
    if [ "$noOfLines" == "" ]; then noOfLines=0; fi
    if [ $noOfLines -eq 0 ]; then
      echo "$currentFileName:$currentLine:" >> $changedLinesFile
    else
      while [ $noOfLines -gt 0 ]
      do
        echo "$currentFileName:$currentLine: C:" >> $changedLinesFile
        currentLine=`expr $currentLine + 1`
        noOfLines=`expr $noOfLines - 1`
      done
    fi;
  fi
done < $gitDiffFile

if [ `cat  $changedRubyFiles | wc -l` -gt 0 ]
then
  command -v rvm &> /dev/null || RVM_MISSING="yes"
  if [ "$RVM_MISSING" == "yes" ]
  then
    export PATH="$HOME/.rvm/bin:$PATH" # Add RVM to PATH for scripting
    [ -s "$HOME/.rvm/scripts/rvm" ] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
    rvm default
  fi;
  command -v rubocop &> /dev/null || gem install rubocop || { echo "Could not install rubocop. Please install and commit code"; exit 1; }
  rubocop --no-color -o $rubocopOutfile `cat $changedRubyFiles | xargs echo` &> /dev/null || syntaxErrors="YES"
fi

grep -A 1 -f $changedLinesFile $rubocopOutfile > $matchingChangesFile

if [ `cat $matchingChangesFile | wc -l` -gt 0 ]
then
  printMsg "Rubocop reported the below listed errors in the files(/lines) you changed. Kindly fix it and commit"
  cat $matchingChangesFile
  printMsg "Tip : You can use rubocop to quickly fix NEW files as follows. Take a backup before you do.

rubocop -a `cat $changedRubyFiles | xargs echo`
"
  exit 1;
fi
