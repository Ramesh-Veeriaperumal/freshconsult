// Mixins
// Snippets of reusable CSS to develop faster and keep code readable
// -----------------------------------------------------------------


// UTILITY MIXINS
// --------------------------------------------------

// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    @include clear(both);
  }
}

.clearfix {
  @include clearfix();
}

// Webkit-style focus
// ------------------
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Center-align a block level element
// ----------------------------------
@mixin center-block() {
  display: block;
  @include margin-left(auto);
  @include margin-right(auto);
}

// IE7 inline-block
// ----------------
@mixin ie7-inline-block() {
  *display: inline; // IE7 inline-block hack
  *zoom: 1;
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin ie7-restore-left-whitespace() {
  *margin-left: .3em;
  &:first-child {
    *margin-left:0;
  }
}

@mixin ie7-restore-right-whitespace() {
  *margin-right: .3em;

  &:last-child {
    *margin-left: 0;
  }
}

// Sizing shortcuts
// -------------------------
@mixin size($height, $width) {
  width: $width;
  height: $height;
}
@mixin square($size) {
  @include size($size, $size);
}

// Placeholder text
// -------------------------
@mixin placeholder($color: $placeholderText) {
  .placeholder{
    color: $color;
  }
  input:-moz-placeholder {
    color: $color;
  }
  input:-ms-input-placeholder {
    color: $color;
  }
  input::-webkit-input-placeholder {
    color: $color;
  }
  [type="search"]{
      -webkit-appearance: textfield;
  }
}

// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// CSS image replacement
// -------------------------
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
@mixin hide-text {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

.hide-text {
  @include hide-text();
}

// FONTS
// --------------------------------------------------

@mixin font-family-serif() {
  font-family: $serifFontFamily;
}
@mixin font-family-sans-serif() {
  font-family: $sansFontFamily;
}
@mixin font-family-monospace() {
  font-family: $monoFontFamily;
}
@mixin font-shorthand($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  font-size: $size;
  font-weight: $weight;
  line-height: $lineHeight;
}
@mixin font-serif($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  @include font-family-serif();
  @include font-shorthand($size, $weight, $lineHeight);
}
@mixin font-sans-serif($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  @include font-family-sans-serif();
  @include font-shorthand($size, $weight, $lineHeight);
}
@mixin font-monospace($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  @include font-family-monospace();
  @include font-shorthand($size, $weight, $lineHeight);
}

// FORMS
// --------------------------------------------------

// Block level inputs
@mixin input-block-level {
  display: block;
  width: 100%;
  min-height: 28px;        // Make inputs at least the height of their button counterpart
  @include box-sizing(border-box); // Makes inputs behave like true block-level elements
}


// Mixin for form field states
@mixin formFieldState($textColor: #555, $borderColor: #ccc, $bg_color: #f5f5f5) {
  // Set the text color
  > label,
  .help-block,
  .help-inline,
  .error {
    color: $textColor;
  }
  // Style inputs accordingly
  .checkbox,
  .radio,
  input,
  select,
  textarea {
    color: $textColor;
    border-color: $borderColor;
    &:focus {
      border-color: darken($borderColor, 10%);
      @include box-shadow(0 0 6px lighten($borderColor, 20%));
    }
  }
  // Give a small background color for input-prepend/-append
  .input-prepend .add-on,
  .input-append .add-on {
    color: $textColor;
    background-color: $bg_color;
    border-color: $textColor;
  }
}


// Grid System
// -----------

// Centered container element
@mixin container-fixed() {
  @include margin-right(auto);
  @include margin-left(auto);
  @include clearfix();
}

// Table columns
@mixin tableColumns($columnSpan: 1) {
  @include float(none); // undo default grid column styles
  width: (($gridColumnWidth) * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  @include margin-left(0); // undo default grid column styles
}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
@mixin makeRow() {
  @include margin-left($gridGutterWidth * -1);
  @include clearfix();
}
@mixin makeColumn($columns: 1, $offset: 0) {
  @include float(left);
  @include margin-left(($gridColumnWidth * $offset) + ($gridGutterWidth * ($offset - 1)) + ($gridGutterWidth * 2));
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

// The Grid

@mixin input-span($columns, $gridColumnWidth, $gridGutterWidth) {
  width: (($gridColumnWidth) * $columns) + ($gridGutterWidth * ($columns - 1)) - 10;
}

@mixin grid-input($gridColumnWidth, $gridGutterWidth) {
  input,
  textarea,
  .uneditable-input {
    @include margin-left(0); // override margin-left from core grid system
  }

  // generate .spanX
  $i: $total-columns;
  @while $i > 0 {
    input.span#{$i},
    textarea.span#{$i},
    .uneditable-input.span#{$i} {
      @include input-span($i, $column-width, $gutter-width);
    }
    $i: $i - 1;
  }
}

// BACKGROUNDS
// --------------------------------------------------

// Add an alphatransparency value to any background or border color (via Elyse Holladay)
@mixin translucent-background($color: $white, $alpha: 1) {
  background-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
}

@mixin translucent-border($color: $white, $alpha: 1) {
  border-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
  @include background-clip(padding-box);
}

// Gradient Bar Colors for buttons and alerts
@mixin gradientBar($primaryColor, $secondaryColor) {
  @include gradient-vertical($primaryColor, $secondaryColor);
  border-color: $secondaryColor $secondaryColor darken($secondaryColor, 15%);
  border-color: rgba(0,0,0,.1) rgba(0,0,0,.1) fade-in(rgba(0,0,0,.1), 0.15);
}

// Gradients
@mixin gradient-horizontal($startColor: #555, $endColor: #333) {
  background-color: $endColor;
  background-image: -moz-linear-gradient(left, $startColor, $endColor); // FF 3.6+
  background-image: -ms-linear-gradient(left, $startColor, $endColor); // IE10
  background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(left, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient(left, $startColor, $endColor); // Opera 11.10
  background-image: linear-gradient(left, $startColor, $endColor); // Le standard
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{darken($startColor, 1%)}', endColorstr='#{darken($endColor, 1%)}', GradientType=1); // IE9 and down
}
@mixin gradient-vertical($startColor: #555, $endColor: #333) {
  background-color: mix($startColor, $endColor, 60%);
  background-image: -moz-linear-gradient(top, $startColor, $endColor); // FF 3.6+
  background-image: -ms-linear-gradient(top, $startColor, $endColor); // IE10
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(top, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient(top, $startColor, $endColor); // Opera 11.10
  background-image: linear-gradient(top, $startColor, $endColor); // The standard
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{darken($startColor, 1%)}', endColorstr='#{darken($endColor, 1%)}', GradientType=0); // IE9 and down
}
@mixin gradient-directional($startColor: #555, $endColor: #333, $deg: 45deg) {
  background-color: $endColor;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient($deg, $startColor, $endColor); // FF 3.6+
  background-image: -ms-linear-gradient($deg, $startColor, $endColor); // IE10
  background-image: -webkit-linear-gradient($deg, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient($deg, $startColor, $endColor); // Opera 11.10
  background-image: linear-gradient($deg, $startColor, $endColor); // The standard
}
@mixin gradient-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
  background-color: mix($midColor, $endColor, 80%);
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
  background-image: -webkit-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: -moz-linear-gradient(top, $startColor, $midColor $colorStop, $endColor);
  background-image: -ms-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: -o-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{darken($startColor, 1%)}', endColorstr='#{darken($endColor, 1%)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-radial($innerColor: #555, $outerColor: #333)  {
  background-color: $outerColor;
  background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
  background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -ms-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -o-radial-gradient(circle, $innerColor, $outerColor);
  background-repeat: no-repeat;
}
@mixin gradient-striped($color, $angle: -45deg) {
  background-color: $color;
  background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
  background-image: -webkit-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: -moz-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: -ms-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: -o-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
}

// Reset filters for IE
@mixin gradient-reset-filter() {
  filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);
}

// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
@mixin nav-divider($top: #e5e5e5, $bottom: $white) {
  // IE7 needs a set width since we gave a height. Restricting just
  // to IE7 to keep the 1px left/right space in other browsers.
  // It is unclear where IE is getting the extra space that we need
  // to negative-margin away, but so it goes.
  *width: 100%;
  height: 1px;
  margin: (($baseLineHeight / 2) - 1) 1px; // 8px 1px
  *margin: -5px 0 5px;
  overflow: hidden;
  background-color: $top;
  border-bottom: 1px solid $bottom;
}

// Button backgrounds
// ------------------
@mixin buttonBackground($startColor, $endColor) {
  // gradientBar will set the background to a pleasing blend of these, to support IE<=9
  @include gradientBar($startColor, $endColor);
  *background-color: $endColor; /* Darken IE7 buttons by default so they stand out more given they won't have borders */
  @include gradient-reset-filter();

  // in these cases the gradient won't cover the background, so we override
  &:hover, &:active, &.active, &.disabled, &[disabled] {
    background-color: $endColor;
    *background-color: darken($endColor, 5%);
  }

  // IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
  &:active,
  &.active {
    background-color: darken($endColor, 10%) \9;
  }
}

// Icon replacements for mobile
// Text in icon container will be replaced with icon alternative
// -------------------------------------------------------------

/* TODO_RAILS3 Migrate this in to a sprite helper than a sprite include */
@mixin mobile-icon($class, $bg_color: $white) {
  .mobile-icon-#{$class}{
    &:before{
      content:"";
      @if lightness($bg_color) > 50% {
        @include dynamic-icon-sprite(#{$class}-dark);
      } @else {
        @include dynamic-icon-sprite(#{$class});
      }
      @include inline-block;
      vertical-align: text-top;
    }
  }
}


// Formatting used for solutions
@mixin text-formatting(){    
    & {
      text-align: initial;
      font-size: 13px;
    }
    p, li, div{
      font-size: 13px;
      line-height: 18px;
      margin:0;
    }
    code, pre, p, li, div{
      word-break: normal;
      word-wrap: break-word;
    }
    pre {
      white-space: pre-wrap;       /* css-3 */
      white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */
    }
    h1 {font-size: 2em}
    h2 {font-size: 1.5em}
    h3 {font-size: 1.17em}
    h4 {font-size: 1em}
    h5 {font-size: .83em}
    h6 {font-size: .75em}
    
    h1,h2,h3,h4,h5,h6 { font-weight: 400; }

    iframe { border:0; max-width: 100%; }
    table { cursor:default; border: none; } 
    table td, table th {
      cursor:text; 
      font-size: inherit; 
      font-size: 13px; 
      padding: 4px; 
      border: 1px solid #afafaf;
    }
    em{ font-style:italic; }
    ins {border-bottom:1px solid green; text-decoration: none; color:green}
    cite {border-bottom:1px dashed blue}
    acronym {border-bottom:1px dotted #CCC; cursor:help}
    abbr {border-bottom:1px dashed #CCC; cursor:help}
    ol, ul{ @include margin(8px 0 4px 0); @include padding(0 0 0 40px); line-height: 17px;}
    ul{ list-style:disc outside;  }
    blockquote { font-size:13px; line-height:22px; margin:0.5em; color: #666; @include border-left(1px dotted #999); @include padding(6px 6px 1px 1em); }
    del{ text-decoration:none; }   

}

// Formatting used for solution text editor
@mixin editor-text-formating() {

  img {
    &.fr-dib { margin: 5px auto; display: block; float: none; vertical-align: top; }
    &.fr-dib.fr-fil { margin-left: 0; }
    &.fr-dib.fr-fir { margin-right: 0; }
    &.fr-dii { display: inline-block; float: none; vertical-align: bottom; margin-left: 5px; margin-right: 5px; max-width: calc(100% - (2 * 5px)); }
    &.fr-dii.fr-fil { float: left; margin: 5px 5px 5px 0; max-width: calc(100% - 5px); }
    &.fr-dii.fr-fir { float: right; margin: 5px 0 5px 5px; max-width: calc(100% - 5px); }
    &.fr-rounded { border-radius: 100%; @include background-clip(padding-box); }
    &.fr-bordered { border: solid 1px #CCC; @include box-sizing( content-box ); }
  }

  table.fr-dashed-borders th, table.fr-dashed-borders td { border-style: dashed; }
  table.fr-alternate-rows tbody tr:nth-child(2n) { background: #f5f5f5; }
  table th { font-weight: bold; }
  table td, table th {
    &.fr-selected-cell { border: 1px double #1e88e5; }
    &.fr-highlighted { border: 1px double red; }
    &.fr-thick { border-width: 2px; }
  }

  hr { border: 1px solid #9E9E9E; }

  blockquote { border-left: solid 2px #5e35b1;margin-left: 0;padding-left: 5px;color: #5e35b1; }
  blockquote blockquote {border-color: #00bcd4; color: #00bcd4; }
  blockquote blockquote blockquote { border-color: #43a047; color: #43a047; }

  // Paregraph styles
  .fr-text-gray { color: #AAA !important; }
  .fr-text-bordered { border-top: solid 1px #9E9E9E; border-bottom: solid 1px #9E9E9E; padding: 10px 0; }
  .fr-text-spaced { letter-spacing: 1px; }
  .fr-text-uppercase { text-transform: uppercase; }

  .fr-video { text-align: center; position: relative; }
  .fr-video > * { @include box-sizing( content-box ); max-width: 100%; border: none; }
  .fr-video.fr-dvb { display: block; clear: both; }
  .fr-video.fr-dvb.fr-fvl { text-align: left; }
  .fr-video.fr-dvb.fr-fvr { text-align: right; }
  .fr-video.fr-dvi { display: inline-block; }
  .fr-view .fr-video.fr-dvi.fr-fvl { float: left; }
  .fr-video.fr-dvi.fr-fvr { float: right; }

  a.fr-strong { font-weight: 700; }
  a.fr-green { color: green; }
}

// Transforms the element into a triangle
@mixin triangle($direction: down, $color: black, $size: 6px) {
  @if $direction == left {
    border-bottom: $size solid transparent;
    @include border-right($size solid $color);
    border-top: $size solid transparent;
  }
  @else if $direction == right {
    border-bottom: $size solid transparent;
    @include border-left($size solid $color);
    border-top: $size solid transparent;
  }
  @else if $direction == up {
    border-bottom: $size solid $color;
    @include border-left($size solid transparent);
    @include border-right($size solid transparent);
  }
  @else if $direction == down {
    @include border-right($size solid transparent);
    @include border-left($size solid transparent);
    border-top: $size solid $color;
  }
  height: 0;
  width: 0;
}

// Mixin for Word Break
@mixin word-hyphernate {
    word-break: break-word;
    -ms-word-wrap: break-word;
    word-wrap: break-word;
}