<!-- Note: when any changes made to TICKET_FIELD_ELEMENTS PARTIAL in the future, 
      please update the memcache key version. key_name :: COMPOSE_EMAIL_FORM  -->
<% 
  field_order = Helpdesk::TicketField.default_field_order

  default_fields = []
  custom_fields = []
  default_ticket_type_field = ""
  section_container = ""
  ticket_fields ||= current_portal.ticket_fields_including_nested_fields
%>
<% ticket_fields.each do |field| 
  next if field.section_field?
  if field.visible_in_view_form?
    if field.is_default_field?
      field_value = @ticket.send(field.field_name).to_s
      field_label = t("ticket_fields.fields.#{field.name}")
    else
      field_value = @ticket.send(field.name) unless @ticket.new_record? and !params[:template_form]
      field_label = (field.label).html_safe
    end
    dom_type    = (field.field_type == "default_source") ? "dropdown" : field.dom_type
    field_value = nested_ticket_field_value(@ticket, field) if (field.field_type == "nested_field") and (!@ticket.new_record? or params[:template_form])
    field_html = construct_new_ticket_element(form_builder, :helpdesk_ticket, 
                                          field, field_label, dom_type, 
                                          field.required, field_value, '', false, false)
    if field.is_default_field?
      if(field.field_type == "default_ticket_type" && field.has_sections_feature?)
        default_ticket_type_field  << field_html.html_safe
      else
        default_fields << [ field.field_type , field_html ]
      end
    else
      custom_fields << field_html
    end
    section_container += construct_new_section_fields(form_builder, :helpdesk_ticket, field, false, @ticket, !@ticket.new_record?) if field.has_section?
  end
end
default_fields.sort! {|x,y| field_order.index(x.first) <=> field_order.index(y.first) }
%>
<% default_fields.each do |field| %>
  <%= field.last %>
<% end %>
<%= default_ticket_type_field.html_safe unless default_ticket_type_field == "" %>
<%= content_tag(:li, section_container.html_safe) if section_container.present? %>
<% custom_fields.each do |field| %>
  <%= field %>
<% end %>

<%= javascript_tag do %>  
  <% if (!@ticket.new_record? or params[:template_form]) and @ticket.ticket_status.deleted? %>
    jQuery("#helpdesk_ticket_status")
    .append('<option disabled="disabled" value = "<%= @ticket.status %>"> <%= @ticket.status_name %> </option>')
    .val("<%=@ticket.status%>")
  <% end %>

  jQuery("#helpdesk_ticket_email").blur(function(){
    var ticket_email = jQuery("#helpdesk_ticket_email").val();

    jQuery.ajax({ url: "<%= helpdesk_commons_user_companies_path %>,
      type: 'POST',
      datatype: 'json',
      data: {email: ticket_email},
      success: function(data){
        if(data != false){
          jQuery('#helpdesk_ticket_company_id').empty();
          for(var i=0; i<data.length; i++){ 
            jQuery("<option/>").val(data[i][1]).html(data[i][0]).appendTo("#helpdesk_ticket_company_id");
          }
          jQuery('#helpdesk_ticket_company_id').val('').change();
          jQuery('.default_company label').removeClass("company_field");
          jQuery('.default_company').insertBefore(jQuery(".default_priority")).show();
          jQuery('#helpdesk_ticket_company_id').removeAttr("disabled");
        }else{
          jQuery('.default_company').slideUp();
          jQuery('#helpdesk_ticket_company_id').attr("disabled", true);
        }
      }
    });
  });

  // Need to make the code generic to handle the custom dropdown fields sections.
  jQuery("#helpdesk_ticket_ticket_type")
    .on("change", function(e){
      var id = jQuery("option:selected", this).data("id");
      jQuery('ul.ticket_section').remove();
      var element = jQuery('#picklist_section_'+id).parent();
      if(element.length != 0) {
        element.append(jQuery('#picklist_section_'+id).val()
                .replace(new RegExp('&lt', 'g'), '<')
                .replace(new RegExp('&gt', 'g'), '>'));
      }
  }).trigger('change');
<% end %>

<% values = params[:template_form] ? @template.template_data[:tags] : @ticket.tags.collect{|tag| tag.name}.join(',') %>
<%= render :partial => "/helpdesk/tickets/remote_tags" , :locals => {:values => values,  :element_id => :helpdesk_ticket_tags_input, :element_name => "helpdesk[tags]" }%>

<% unless privilege?(:edit_ticket_properties) %>
  <%= javascript_tag do %> 
    jQuery('#custom_ticket_form').find('select, input').attr('disabled', 'disabled');
  <% end %>
<% end %>
