<% unless current_account.verified? %>
     <div id ="errorExplanation" class ="errorExplanation">
      <%= t('ticket.compose.outbound_email_not_activated') %>
     </div>
<% end %>
<% content_for :sidebar do -%>
  <%= render :partial => "helpdesk/tickets/ticket_widget/sidebar",:locals =>{:from_page =>'new_outbound_email_page_side_bar'}%>
<%- end %>

<%# multifile attachments templates %>
<% if  current_account.launched?(:multifile_attachments)  %>
  <%= render "helpdesk/tickets/ticket_widget/multifile_template_generator" %>
<% else %>
  <%= render "helpdesk/shared/single_attachment_template" %>
<% end %>
<div class="templates-header-wrapper">

    <%= render :partial => "helpdesk/tickets/ticket_widget/new_email_title" %>
    <div class="muted">
          <%= t("ticket.compose.compose_email_info") %>
          <a href="https://support.freshdesk.com/support/solutions/articles/211974" target="_blank"><%= t("ticket.compose.learn_more") %></a>
   </div>


<%
  sign_value = if (desp = @item.description_html).blank? & (sign =
                  current_user.agent.parsed_signature('ticket' => @ticket, 'helpdesk_name' => @ticket.account.helpdesk_name)).blank?
                desp.to_s
              else
                desp.present? ? (sign.present? ? desp + sign : desp) : ("<p><br /></p>"*2)+sign.to_s
              end
%>

<input type="hidden" value="<%= sign_value %>" id="signature" />

<div id="compose-new-email" class="compose-new-email">
  <%= form_for @item, :html => {:multipart => true, :id => "ComposeTicket", :ignore => "" } do |f| %>
  <div class="address-details">
    <div class="requester-email details-widget light-border">
    <label class="inline-label" for="cc-email-address"><%= t('ticket.compose.from') %> </label>
      <%= select_tag "helpdesk_ticket[email_config_id]", options_for_compose,  {:class => "required from_address_wrapper", :data => {:placeholder => t("ticket.compose.compose_choose_email")}}%>
    <div>
    </div>
    </div>
    <div class="to-address details-widget">
      <label class="inline-label" for="cc-email-address"><%= t('ticket.compose.to') %></label>
      <%= render(:partial => "/shared/autocomplete_email", :formats => [:html],  :locals => {:placeholder => "Type a contact", :object_name => :helpdesk_ticket, :url => requesters_search_autocomplete_index_path }) %>
      <span class="show-cc" data-action="show-cc"><%= t('helpdesk.shared.cc_label') %></span>
    </div>

      <div class="cc-address hide details-widget"
            data-is-trial="<%= do_spam_check? && free_admin_email_account? %>"
            data-limit="<%= get_trial_account_max_to_cc_threshold %>"
            data-msg="<%= t(:'flash.general.recipient_limit_exceeded', :limit =>get_trial_account_max_to_cc_threshold ) %>">
      <label class="inline-label" for="cc-email-address"><%= t('helpdesk.shared.cc_label') %>: </label>
          <%= render :partial => "helpdesk/tickets/ticket_widget/new_email_cc" %>
          <span class="hide-cc" data-action="hide-cc"><%= t('helpdesk.shared.hide_cc') %></span>
    </div>

  </div>

  <% enable_fragment_cache(:compose_email_form) do %>
    <div class="ticket-details">

      <%# sending widget as true%>
      <% widget = true %>
      <%= ticket_body_form f,widget %>
    </div>

    <div class="compose-new-ticket">
      <h3 class="lead"><%= t('ticket.compose.properties') %></h3>
      <%= render :partial => '/helpdesk/tickets/show/ticket_field_elements',  :locals => {:form_builder => f, :ticket =>  @item} %>
    </div>
  <% end %>
  <!-- block ends here for fragment cache -->
  <% end %>
  </div>
  </div>
  <input type="hidden" id="tags-value" value="<%= escape_javascript(current_account.tags.most_used(25).collect{|tag| tag.name}.join(',').html_safe) %>" />

<%= render :partial => "/helpdesk/tickets/canned_loading" %>
<script>
 var isMultifileEnabled = <%= current_account.launched?(:multifile_attachments) %>
</script>

<% if Account.current.launched?(:agent_new_ticket_cache) %>
  <script>
    // To load data from store to populate group for the first time.
    jQuery(document).ready(function(){
      // Load data into group, agent and product from data store if the page is cached
      PopulateData.fromStore("#helpdesk_ticket_group_id", 'group');
    })
  </script>
<% end %>