<%
  acc = Account.current
  tracker_ticket = acc.link_tkts_enabled? && params[:display_ids].present?
  is_child_form  = acc.parent_child_tkts_enabled? && params[:ticket_id] && @assoc_parent_ticket
  skip_frag_cache =  (tracker_ticket || is_child_form || params[:topic_id].present?)
  ticket_title = if tracker_ticket
    "new_tracker_title"
  elsif is_child_form
    "child_ticket_title"
  else
    "new_ticket_title"
  end
%>
<% if tracker_ticket || is_child_form%>
  <% content_for :helpcard do 
    helpcard = tracker_ticket ? "tracker" : "child" %>
    <%= render :partial => "helpdesk/tickets/new_#{helpcard}_helpnote" %>
  <% end %>
<% end %>
<% content_for :sidebar do %>
  <%= render :partial => "helpdesk/tickets/ticket_widget/sidebar", :locals => {:from_page => 'new_ticket_page_side_bar'}%>
<% end %>

<%# multifile attachments templates %>
<% if  current_account.launched?(:multifile_attachments)  %>
  <%= render "helpdesk/tickets/ticket_widget/multifile_template_generator" %>
<% else %>
  <%= render "helpdesk/shared/single_attachment_template" %>
<% end %>

<div class="templates-header-wrapper">
  <%= render :partial => "helpdesk/tickets/ticket_widget/#{ticket_title}" %>
<div id="ticket-fields-wrapper">
  <%= form_for @item, :html => {:multipart => true, :id => "NewTicket", :ignore => "" } do |f| %>
    <!-- fragment caching starts here -->
    <% enable_fragment_cache(:agent_new_ticket, skip_frag_cache) do %>
      <ul class="compose-new-ticket">
        <%= render :partial => "ticket_form", :object => f, :locals => { :is_edit => (@item.errors.any? ? true : false), :is_child_form => is_child_form, :f => f } %>
      </ul>
    <% end %>
    <!-- block ends here for fragment cache -->
    <%= hidden_field_tag('topic_id', params[:topic_id]) %>
    <%= hidden_field_tag('display_ids', params[:display_ids]) %>
    <%= hidden_field_tag('assoc_parent_id', params[:ticket_id]) %>
  <% end %>
</div>
</div>

<!-- For trial spam restriction -->
<input type="hidden" id="trial_spam_error_msg" value="<%= t(:'flash.general.recipient_limit_exceeded', :limit =>get_trial_account_max_to_cc_threshold ) %>" />
<input type="hidden" id="to_cc_spam_threshold" value=<%= get_trial_account_max_to_cc_threshold %> />
<input type="hidden" id="is_trial_spam_account" value=<%= do_spam_check? &&free_admin_email_account? %> />

<%= render :partial => "/helpdesk/tickets/canned_loading"  %>
<script>
    var isMultifileEnabled = <%= current_account.launched?(:multifile_attachments) && current_account.launched?(:pjax_reload) %>
</script>
<% if Account.current.launched?(:agent_new_ticket_cache) %>
  <script>
  // To load data from store to populate group/agent/product for the first time.
    jQuery(document).ready(function(){
      if(<%= skip_frag_cache == false %>){
        PopulateData.fromStore("#helpdesk_ticket_group_id", 'group');
        PopulateData.fromStore("#helpdesk_ticket_responder_id", 'agent');
        //PopulateData.fromStore("#helpdesk_ticket_product_id", 'product');
      }
    });
  </script>
<% end %>

<%
attachment_dom = ""
  if current_account.launched?(:multifile_attachments)
    attachment_dom = ""
  else
    if @all_attachments.present?
      @all_attachments.each do |att|
        if att.attachable_type != "Account"
          attachment_dom << send(:description_attachment, {:filename=>"#{escape_javascript(att.content_file_name)}",:value => "#{att.id}", :name => "helpdesk_ticket[attachments][][resource]"})
        else
          attachment_dom << send(:description_attachment, {:filename=>"#{escape_javascript(att.content_file_name)}", :value => "#{att.id}", :name => "shared_attachments[]"})
        end
      end
    end

    if @cloud_files.present?
      @cloud_files.each do |att|
        attachment_dom << send(:description_attachment, {:filename=>"#{escape_javascript(att.filename)}", :value => "#{att.serialize}", :name => "[cloud_file_attachments][]"})
      end
    end
  end
%>

<% content_for :onload_script do  %>
  function unescapeHtml(text) {
      var temp = document.createElement("div");
      temp.innerHTML = text;
      var result = temp.childNodes[0].nodeValue;
      temp.removeChild(temp.firstChild);
      return result;
  }
  <% if !current_account.launched?(:multifile_attachments)%> 
    <% if @all_attachments.present? or @cloud_files.present? %>

      var x = '<%= escape_javascript(attachment_dom) %>';
      jQuery('#ticket-attachments').html(unescapeHtml(x));
      jQuery("#prev-attachments").html("");

    <% end %>
  <% else%>
    <% if is_child_form %>
      Helpdesk.MultipleFileUpload.renderExistingFiles(<%= @all_attachments.to_json.html_safe%>,<%=@cloud_files.to_json.html_safe %>,jQuery('.attachment-icon:visible').data('iconCount'), true, 'helpdesk_ticket', true);
    <% end %>
  <% end %>
<% end %>
