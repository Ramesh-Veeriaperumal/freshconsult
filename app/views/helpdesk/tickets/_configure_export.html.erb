<% form_tag({:action => :export_csv, :a=>params[:a], :i=>params[:i] }, { :method => :post, :id => 'exportFilter' }) do %>
  <input type="hidden" name="data_hash" value="" />
	<div class="info-highlight"><%=t('export_data.info')%></div>
	<ul class="ui-form configure_export">
		<li class="inline-field">
			<% if logged_in? and current_user.agent? %>
				<h4 class="caption title"><%=t('export_data.filter_label_agent')%></h4>
				<label class="caption">
					<%= select_tag "ticket_state_filter", options_for_select(TicketConstants::STATES_HASH.map {|k,v| [v,k]}, [:created_at]), {:class => "dropdown"} %>
				</label>
			<% else %>
				<label class="caption"><%=t('export_data.filter_label_customer')%></label>
			<% end %>	 					
			<div class="fields">
				<label>
					<%= select_tag "date_filter", options_for_select(TicketConstants::CREATED_BY_OPTIONS), :class => "dropdown" %>
				</label>
	 			<div id="datepicker" style="display:none;">
					<span class="seperator"></span>
					<label class="caption"><%=t('export_data.from')%></label>
					<div class="fields">						
						<input type="text" id="start_date" date="" name="start_date" class="text auto" size="15" />
					</div>
					<label class="caption"><%=t('export_data.to')%></label>
					<div class="fields">
						<input type="text" id="end_date" date="" class="text auto" name="end_date" size="15" />		
					</div>
				</div>
		</div>
		</li>
		<li class="inline-field">
	 		<span class="seperator"></span>
			<h4 class="title"><%= t('export_data.select_header') %></h4>
			<div class="info-highlight error hide" id="err_no_fields_selected"><%= t('export_data.no_fields_selected') %> </div>
			<div class="threecol-form" id="ticket_fields">
	 			<% csv_headers.each do |head| %>
	 			  	<div class="item <%= head[:type] %>">
		  				<label class="checkbox prime"> 
		    				<%= check_box_tag "export_fields[#{head[:label]}]", head[:value], head[:selected] %> 
							<%= head[:label] %>														
		  				</label>
		  				<% head[:levels].each do |level| %>
		  					<br />
			  				<label class="checkbox level"> 
			    				<%= check_box_tag "export_fields[#{level[:label]}]", level[:name], false  %> 
								<%= level[:label] %>
			  				</label>
			  			<% end %>
	  			    </div>	
	 			<% end %>
			</div>
		<li>
	</ul>	
	<div class="button-container">
		<%= submit_tag t('export_data.export_to_csv'), :class => "uiButton", :id => "ExportToCSV" %>
	</div>
<%end%>

<% javascript_tag do %>
  jQuery("#exportFilter").submit(function() {  

	if (jQuery('#ticket_fields :checked').length == 0) {
		jQuery('#err_no_fields_selected').removeClass('hide');
		return false;
	} else {
		jQuery('#err_no_fields_selected').addClass('hide');
		
	 	getFilterData();
		jQuery("#exportFilter input[name=data_hash]").val(query_hash.toJSON());
		jQuery("#ExportToCSV").prop('disabled', 'disabled').switchClass("uiButton", "ui-after-submit", 0);
		setTimeout(function(){
			active_dialog.dialog("close");
			jQuery("#ExportToCSV").removeAttr('disabled', 'disabled').switchClass("ui-after-submit", "uiButton", 0);
		}, 1000);
	}
  });

  jQuery("#date_filter").change(function(){
  	jQuery("#datepicker").toggle(jQuery("#date_filter").val() == "<%=TicketConstants::CREATED_BY_KEYS_BY_TOKEN[:custom_filter]%>");
  });

  jQuery("div.nested_field label.prime").change(function(ev){  	
  	_condition = !jQuery(this).children("input").prop("checked");
  	jQuery(this).siblings(".level").children("input").prop({ "checked": !_condition });
  });

  var date_today = new Date();
  jQuery(document).ready(function() {
		var dates = jQuery( "#start_date, #end_date" ).datepicker({
			changeMonth: true, 
			changeYear: true,
			numberOfMonths: 3,
			showButtonPanel: true,
			maxDate: "today",
			showOn: "both", 
			disabled: true,
			onSelect: function( selectedDate ) {
				var option = this.id == "start_date" ? "minDate" : "maxDate",
					instance = jQuery( this ).data( "datepicker" ),
					date = jQuery.datepicker.parseDate(
						instance.settings.dateFormat ||
						jQuery.datepicker._defaults.dateFormat,
						selectedDate, instance.settings );
				dates.not( this ).datepicker( "option", option, date );
				jQuery(this).prop("date", date);
			}
		});
		
		jQuery("#start_date").val((date_today.getMonth()) + '/' + date_today.getDate() + '/' + date_today.getFullYear());
		jQuery("#end_date").val((date_today.getMonth()+1) + '/' + date_today.getDate() + '/' + date_today.getFullYear());		
		
	});
<% end %>
