  <% content_for :onload_script do -%>
    jQuery('[rel=cc_div]').bind("cc_visibility", function(eo){
		_condition = (jQuery(this).find("input[type=hidden]").size() > 0)
		jQuery(jQuery(this).data("parent")).toggle(_condition);
		jQuery(jQuery(this).data("button")).trigger("textChange");
	})
	jQuery('a[rel=cc_button]').click(function(ev){
		ev.preventDefault();
		jQuery(jQuery(this).data("parent")).toggle();
		jQuery(this).trigger("textChange");
		
	}).bind("textChange", function(ev){
		_condition = (jQuery(jQuery(this).data("parent")).css("display") != "none");
		jQuery(this).text( _condition ? jQuery(this).data("hideText") : jQuery(this).data("showText"));	
		jQuery(jQuery(this).data("input")).prop("checked", _condition);
	});
	
  <%- end %>
  
  <% javascript_tag do %>
                  function lookup(searchString, callback) { 
                    new Ajax.Request('<%= autocomplete_helpdesk_authorizations_path %>?v='+searchString, 
                                                              { parameters: {name: searchString, rand: (new Date()).getTime()},
                                                              onSuccess: function(response) {
                                                                var choices = $A();
                                                                response.responseJSON.results.each(function(item){
																  if(item.value == "") {
																  	choices.push([item.id, item.id]);
																  } else {
																	choices.push([item.value +" <"+item.id+">", item.value +" <"+item.id+">" ]);
																  }	
                                                                });                                                
                                                                callback(choices);
                                                              } });
                                                            }
                  var cachedBackend = new Autocompleter.Cache(lookup, {choices: 10});
                  var cachedLookup = cachedBackend.lookup.bind(cachedBackend);
<% end %>

<div class="request_panel hide" id="<%=cntid%>">
    <% form_for note, :html => {:multipart => true, :id => "HelpdeskReply" ,:onsubmit =>"validateMCEData();"} do |f| %>
    <%= f.error_messages %>
    <% capsule_config = get_app_config('capsule_crm') 
    
      bcc_drop_box_email = (capsule_config.blank?) ? [] : capsule_config["bcc_drop_box_mail"].split( /,* /).map{|item|[item, item]}
      fixed_bcc = (current_account.bcc_email.blank?) ? [] : current_account.bcc_email.split( /,* /).map{|item|[item, item]}
      bcc_drop_box_email += fixed_bcc  

		  reply_cc_emails_blank = @ticket.cc_email_hash.nil? ? true : @to_cc_emails.blank?
    %>
       
    <ul class="ui-form dont-validate">
				<div class="request_form_options">
					<a href="#" class="slim-button" rel="cc_button" data-input="#include_cc" data-parent="#cc-form-container" data-show-text="<%= t(".addcc")%>" data-hide-text="<%= t(".removecc")%>" id="add_cc_btn">
						<%= t(".addcc") %>
					</a>
					<a href="#" class="slim-button"  rel="cc_button" data-input="#include_bcc" data-parent="#bcc-form-container" data-show-text="<%= t(".addbcc")%>" data-hide-text="<%= t(".removebcc")%>" id="add_bcc_btn" >
						<%= (bcc_drop_box_email.blank?)? t(".addbcc"): t(".removebcc")  %>
					</a>
					<%= link_to_function( t(:'ticket.canned_responses.insert_ca_response') + " &raquo;", "show_canned_response(#{@ticket.id})", :class => "slim-button insert-canned-response") %>
        </div>
        <%= content_tag( :h4, t(".title", :email => @ticket.requester.email), :class => "title", :id => "reply_email_id" ) %>
        <li class="inline-field field" >
            <%= f.label(:reply_email, "From:", :class => "caption" ) %>
            <div class="fields">
              <%= select :reply_email, :id, options_for_select(@reply_email, @ticket.selected_reply_email) %>
              <input type="checkbox" class="hide" id="include_cc" name="include_cc" value="true" <%= (!reply_cc_emails_blank)? "checked" : "" %> />              
              <input type="checkbox" class="hide" id="include_bcc" name="include_bcc" value="true"  />
					</div>
        </li>
        <li class="inline-field field hide" id="cc-form-container">
            <label class="caption">
                <%= t(".cc") %>:
            </label>
			<div class="fields" id="reply_cc_emails_id" rel="cc_div" data-button="#add_cc_btn"  data-parent="#cc-form-container">
                <% content_for :onload_script do -%>
                  new Autocompleter.MultiValue("cc_emails", cachedLookup, $A(<%= @to_cc_emails.map{|item|[item, item]}.to_json unless reply_cc_emails_blank %>), {frequency: 0.1, acceptNewValues: true,separatorRegEx:/;|,/});
				<%- end %>
                <input type="text" id="cc_emails" name="cc_emails" />
            </div>
        </li>
        
		    <li class="inline-field field" id="bcc-form-container" style='display:<%= bcc_drop_box_email.blank? ? "none": "block" %>;'>
			    <label class="caption">
            <%= t(".bcc") %>:
          </label>

          <div class="fields">
            <% content_for :onload_script do -%>
              new Autocompleter.MultiValue("bcc_emails", cachedLookup, $A(<%= bcc_drop_box_email.to_json unless bcc_drop_box_email.blank? %>), {frequency: 0.1, acceptNewValues: true,separatorRegEx:/;|,/});
				    <% end %>
            <input type="text" id="bcc_emails" name="bcc_emails" />
          </div>
        </li>
        <li class="inline-field field">
            <label class="caption">
                <%= t("message") %>:
            </label>
            <div class="fields">
                <%= f.text_area :body_html, :class => "required mceEditor", :id => "#{id}-#{cntid}-body", :value => bind_last_conv(@ticket, @signature) %>
            </div>
        </li>
        <% if !@ticket.ticket_topic.nil? and !(@ticket.ticket_topic.topic.locked) %>
        <li class="inline-field field">
            <div class="fields">
                <label>
                    <%= check_box_tag :post_forums %><%= t("ticket.reply_form.post_to_linked_forum") %>
                </label>
            </div>
        </li>
        <% end %>
        <!-- reply will be always public -->
        <%= f.hidden_field :private , :value => false %>
        <!--reply source will be always email-->
        <%= f.hidden_field :source , :value => Helpdesk::Note::SOURCE_KEYS_BY_TOKEN["email"] %>
        <%= hidden_field_tag(:page , params[:page], :id=>:page  ) unless params[:page].nil? %>
		    <%= hidden_field_tag(:ticket_status , params[:ticket_status], :id=>:reply_ticket_status  )%>
        <li class="inline-field field">
            <div class="attachment-options fields" id="attachment-options-reply">
                <% unless local_assigns[:no_attachments] %>
                <%= render :partial => "/helpdesk/shared/attachment_form", :locals => { :attach_id => id , :nsc_param => "helpdesk_note" } %>
                <% end %>
                <%if @ticket.account.survey.can_send?(@ticket, Survey::SPECIFIC_EMAIL_RESPONSE)%>
                  <div class="floatr fields" style="top:-80px;"><%= check_box_tag :send_survey %><%= t("ticket.reply_form.send_satisfaction_survey") %></div>
                <%end%>
            </div>            
        </li>
    </ul>
    <div class="button-container">         
    	<%= submit_tag(t('ticket.reply_form.send'), :class => "uiButton special" ) %>
    	<%= submit_tag(t('ticket.reply_form.send_and_resolve'), :onclick => "jQuery('#reply_ticket_status').val('resolved');" , :class => "uiButton", :id => "send_resolve_btn") %>
		<%= button_to_function(t('cancel'), "jQuery('#cnt-reply').slideUp()", :class => "uiButton" ) %>
    </div>

    <% end %>
</div>
<% content_for :pagefixed do %>
  <% javascript_tag do %>
  	jQuery("#HelpdeskReply").validate();	
  <% end %>
<% end %>
