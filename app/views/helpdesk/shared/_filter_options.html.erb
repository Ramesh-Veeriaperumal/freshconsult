<% unless current_account.launched?(:load_ticket_filter)%>
<div id="all-views-tmpl" class="hide">
    <%= render :partial => "filters", :locals =>{ :selected => @current_view, :custom_filters => @filters_options } %>
</div>

<%= javascript_tag do%>
  jQuery(document).ready(function(){
    jQuery('#all-views').html(jQuery('#all-views-tmpl').html());
    jQuery('#all-views-tmpl').html('');
  })
<% end %>

<% end %>
<script type="text/javascript">
  function getFilterData(){
    query_hash = $A();
    jQuery("div.ff_item").map(function () {
      var condition = this.getAttribute("condition"),
          container = this.getAttribute("container"),
          operator  = this.getAttribute("operator");
      _selector = 'input:checkbox:checked';
      var value;

      if(container == "multi_select") _selector = 'option:selected';

      if(container == "nested_field") {
        value = jQuery(this).children('select').val();
      }
      else if(container == "requester"){
        value = jQuery('#requester_filter').val().toString() || '';
      }
      else if(container == "customers"){
        value = jQuery('#customers_filter').val().toString() || '';
      }
      else if(container == "tags"){
        value = jQuery('#tags_filter').val().toString() || '';
      }
      else if(container == "single_select"){
        if(condition == "created_at") {
          if(jQuery('#created_at option:selected').val() != "any_time")
            value =  jQuery('#created_at option:selected').val();
        }
        else {
          if(jQuery(this).children('select').val() != "")
            value = jQuery(this).children('select').val();
        }
      }
      else if(container == "association_type"){
        if(jQuery(this).children('select').val() != "")
            value = jQuery(this).children('select').val();
      }
      else {
        value = jQuery(this).find(_selector).map(function(){ return this.value; }).get();
      }

      if(value && value.length && ((container != "nested_field") || ((container == "nested_field") && (value != ""))) ) {
        if(condition == "created_at" && value == "set_date"){
          value = jQuery("#created_date_range").val();
        }

        query_hash.push(query_params(this,value,container));
      }
    });
    jQuery("#FilterOptions input[name=page]").val(1);

    function query_params(element,value,container){
      return {
        condition   : element.getAttribute("condition"),
        operator    : element.getAttribute("operator"),
        ff_name     : element.getAttribute("ff_name"),
        value       : value.toString()
      }
    }
  }

  function refresh_tickets() {
    if(jQuery("#active_filter").hasClass('unsaved')){
      showSave();
      jQuery('#flag_unsaved_view').prop('disabled', false).val('true');
    }
    else
      showEditAndDelete();
    setDivider();
    getFilterData();
    jQuery("#FilterOptions input[name=data_hash]").val(query_hash.toJSON()).trigger("change");
  }

  function toggle_save_and_refresh(params) {
    if(params !== 'customTrigger'){
      jQuery("#active_filter").addClass('unsaved');
      refresh_tickets();
    }
  }

  function showSave() {
    jQuery('.view_filters').addClass('disable-hover');
    jQuery("#save_as_filter,#cancel_filter,#save_filter,.unsaved_star").removeClass("hide").addClass("vertical-alignment");
    jQuery('#edit_filter,#delete_filter').removeClass("vertical-alignment").addClass("hide");
  }

  function showEditAndDelete() {
    jQuery('.view_filters').removeClass('disable-hover');
    jQuery("#save_as_filter,#cancel_filter,#save_filter,.unsaved_star").switchClass('vertical-alignment','hide');
    jQuery('#edit_filter,#delete_filter').switchClass('hide','vertical-alignment');
  }

  function setDivider() {
    jQuery(document).ready(function(){
      jQuery("#view_manage_links a").removeClass("left-border right-border");
      jQuery("#view_manage_links a:visible:eq(0)").addClass("left-border");
      jQuery("#view_manage_links a:visible:eq(1)").addClass("right-border");
    });
  }
</script>
  <% special_case_views = ['deleted','spam','monitored_by'] %>
    <h5 class="lead"><%= t("tickets_filter.title") %></h5>
    <% if Account.current.launched?(:ticket_list_page_filters_cache) %>
      <div class="sloading loading-small loading-block filter-loading"></div>
    <% end %>
    <%= itil_ticket_filters.html_safe %>
    <form id="FilterOptions" action="#">
      <input type="hidden" name="data_hash" value="" />
      <input type="hidden" name="filter_name" value="<%= @current_view.nil? ? @current_view : CGI.escapeHTML(@current_view.to_s) %>" />
      <input type="hidden" name="wf_order" value="<%= current_wf_order %>" />
      <input type="hidden" name="wf_order_type" value="<%= current_wf_order_type %>" />
  		<input type="hidden" name="page" value="1" />
      <input type="hidden" name="total_entries" value="0">
      <input type="hidden" name="total_entries" value="0">
      <input type="hidden" name="agent_mode" value="<%= current_agent_mode %>">
      <input type="hidden" name="group_mode" value="<%= current_group_mode %>">

      <input type="hidden" name="unsaved_view" id="flag_unsaved_view" <%= "disabled" unless params[:unsaved_view] %> value="true" />
    </form>
    <% enable_fragment_cache(:ticket_list_filters) do %>
      <% @show_options.each_with_index do |c_hash, i| %>
        <%
          if ((!c_hash[:field_type].nil?) && (c_hash[:field_type] == "nested_field"))
            container = "nested_field"
          elsif c_hash[:name] == 'created_at'
            container = "single_select"
          elsif ['requester', 'customers', 'tags', 'association_type'].include?(c_hash[:name])
            container = c_hash[:name]
          elsif ['responder_id','group_id','sl_skill_id'].include?(c_hash[:name])
            container = "multi_select"
          else
            container = (c_hash[:options].size < 5)? "dropdown" : "multi_select"
          end
        %>
    	  <%=
        unless c_hash[:options].blank?
          display_name = c_hash[:name]
          agent_columns = ["responder_id", TicketConstants::SHARED_AGENT_COLUMNS_ORDER].flatten
          group_columns = ["group_id", TicketConstants::SHARED_GROUP_COLUMNS_ORDER].flatten
          if agent_columns.include?(c_hash[:name])
            if current_agent_mode != TicketConstants::FILTER_MODES[:primary]
              c_hash[:name] = TicketConstants::SHARED_AGENT_COLUMNS_CONDITIONS_BY_MODE[current_agent_mode]
              c_hash[:condition] = TicketConstants::SHARED_AGENT_COLUMNS_CONDITIONS_BY_MODE[current_agent_mode]
            end
            agent_columns.each {|col| @current_options[c_hash[:condition].to_s] ||= @current_options[col] }
          elsif group_columns.include?(c_hash[:name])
            if current_group_mode != TicketConstants::FILTER_MODES[:primary]
              c_hash[:name] = TicketConstants::SHARED_GROUP_COLUMNS_CONDITIONS_BY_MODE[current_group_mode]
              c_hash[:condition] = TicketConstants::SHARED_GROUP_COLUMNS_CONDITIONS_BY_MODE[current_group_mode]
            end
            group_columns.each {|col| @current_options[c_hash[:condition].to_s] ||= @current_options[col] }
          end
          content_tag :div,{ :id          => "div_ff_#{c_hash[:condition]}",
                                :class       => "ff_item",
                                :condition   => c_hash[:condition],
                                :operator    => c_hash[:operator],
                                :ff_name     => c_hash[:ff_name],
                                :container   => container,
                                :data => {
                                  :domtype => container,
                                  :id => c_hash[:condition]
                                  }
                                } do %>
            <% if(display_name === "responder_id" && shared_ownership_enabled) %>
              <div class="fd-menu shared_sort_menu" id="agentSort">
                <ul>
                    <%
                      current_sort_name = ""
                      current_agent_sort = ""
                    %>
                    <% TicketsFilter.shared_agent_sort_fields_options.each do |sort_item| %>
                      <% agent_mode = sort_item[1]
                        current_sort_name = sort_item[0] if sort_item[2].to_s == current_agent_mode.to_s
                        current_agent_sort = sort_item[1] if sort_item[2].to_s == current_agent_mode.to_s
                      %>
                      <li>
                        <a class="agent_mode" mode="<%= sort_item[2] %>" href="#" agent_mode="<%=agent_mode%>" >
                          <%if(sort_item[2].to_s == current_agent_mode.to_s) %>
                           <span class="icon ticksymbol"></span>
                           <%end%>
                            <%= sort_item[0] %>
                         </a>
                      </li>
                    <% end %>
                </ul>
              </div>
              <a class="title drop-right nav-trigger agent_text shared_filter_text" href="#" value="<%= current_agent_sort %>" menuid="#agentSort">
                <%= current_sort_name %>
              </a>
            <% elsif (display_name === "group_id" && shared_ownership_enabled) %>
              <div class="fd-menu shared_sort_menu" id="groupSort">
                <ul>
                    <%
                      current_sort_name = ""
                      current_group_sort = ""
                    %>
                    <% TicketsFilter.shared_group_sort_fields_options.each do |sort_item| %>
                      <% group_mode = sort_item[1]
                        current_sort_name = sort_item[0] if sort_item[2].to_s == current_group_mode.to_s
                        current_group_sort = sort_item[1] if sort_item[2].to_s == current_group_mode.to_s
                      %>
                      <li>
                        <a class="group_mode" mode="<%= sort_item[2] %>" href="#" group_mode="<%=group_mode%>" >
                          <%if(sort_item[2].to_s == current_group_mode.to_s) %>
                           <span class="icon ticksymbol"></span>
                           <%end%>
                          <%= sort_item[0] %>
                         </a>
                      </li>
                    <% end %>
                </ul>
              </div>
              <a class="title drop-right nav-trigger group_text shared_filter_text" href="#" value="<%= current_group_sort %>" menuid="#groupSort">
                <%= current_sort_name %>
              </a>
            <% else %>
              <h4 class="title"><%= (c_hash[:f_type] == :default) ? t("filter_options.#{display_name}").html_safe.capitalize : display_name.html_safe %></h4>
            <% end %>
            <%= render :partial => "/helpdesk/tickets/containers/#{container}", :locals => { :container => container, :options => c_hash[:options], :name => c_hash[:name],
             :selected_val => @current_options[c_hash[:condition].to_s].to_s.split(","),
             :field_id => c_hash[:field_id], :nested_fields => c_hash[:nested_fields], :current_options => @current_options, :c_hash => c_hash} %>
          <% end
          end
        end %>
    <% end %>
<%= javascript_tag do%>
  var query_hash  = $A();
  var unassigned = "";
  jQuery(document).ready(function(){

    var selectedGroupTextId = jQuery(".group_text").attr("value");
    if(selectedGroupTextId && selectedGroupTextId.indexOf(".") > -1){
      var splitId = selectedGroupTextId.split(".");
      selectedGroupTextId = splitId[0]+"\\."+splitId[1];
    }
    jQuery("#div_ff_created_date_range").hide();
    if(jQuery("#created_date_range").val() == ""){
      jQuery("#created_date_range").val('<%= TicketConstants.created_date_range_default %>');
    }

    if(jQuery("#created_at").data("selectedValue") != undefined && jQuery("#created_at").data("selectedValue").toString().split("-").length == 2){
      jQuery("#created_date_range").val(jQuery("#created_at").data("selectedValue"));
      jQuery("#created_at").val("set_date").change();
      jQuery("#div_ff_created_date_range").show();
    }

    // #TODO : change the format of the date based on the account config
    jQuery('#created_date_range').bootstrapDaterangepicker(
    {
      ranges: {
      },
      startDate: new Date(jQuery("#created_date_range").val().split("-")[0]),
      endDate: new Date(jQuery("#created_date_range").val().split("-")[1]),
      minDate: Date.parse('1/1/2010'),
      maxDate: new Date(),
      format: "DD MMM YYYY"
    });

    jQuery("#created_date_range").on("clickdate",function(){
      refresh_tickets();
    });

    jQuery(".range_inputs").hide();
    jQuery(".ranges").hide();

    jQuery("#created_date_range").bind('keypress keyup keydown', function(ev) {
      ev.preventDefault();
      return false;
    });

    jQuery("#created_date_range").on("show",function(){
      jQuery(".ranges .active").click();
    });

    setDivider();

    jQuery("#FilterOptions input[name=data_hash]").val($A(<%= (@ticket_filter.query_hash.to_json.gsub('</','<\/')).html_safe %>).toJSON());

    getFilterData();
    <%= 'jQuery("#FilterOptions input[name=data_hash]").val(query_hash.toJSON());'.html_safe unless special_case_views.include?(@current_view) %>

    jQuery(".filter_item").bind("change", function(){
      jQuery("#active_filter").addClass('unsaved');
      if(this.id == "created_at"){
        if(jQuery(this).val() == "set_date"){
          jQuery("#div_ff_created_date_range").show();
          jQuery("#created_date_range").focus();
        }
        else{
          jQuery("#div_ff_created_date_range").hide();
        }
      }
      refresh_tickets();
    });

    if (jQuery("#active_filter").hasClass('unsaved')) {
      showSave();
    }

    jQuery(document).on("click.ticket_filter", '#save_filter', function(e){
      preventDefault(e);
      jQuery(this).addClass('tkt-filter-loading');
      // switchClass if used here is not working in IE8!
      jQuery('.ticket-view-save').removeClass('ticket-view-save').addClass('sloading loading-tiny');
      jQuery.ajax({
        url: "/wf/filter/update_filter",
        type: "POST",
        data: {
          data_hash: query_hash.toJSON(),
          filter_name: jQuery('#active_filter').text(),
          wf_model: "Helpdesk::Ticket",
          wf_order: jQuery('#FilterOptions input[name=wf_order]').val(),
          wf_order_type: jQuery('#FilterOptions input[name=wf_order_type]').val(),
          custom_ticket_filter: {
            visibility: ""
          }
        },
        success: function(msg){}
      });
    });

    //hide link and merge when there is existing association
    var association_type = jQuery('#association_type').val();
    if(association_type == '<%= TicketConstants::TICKET_ASSOCIATION_KEYS_BY_TOKEN[:tracker]%>' || association_type == '<%= TicketConstants::TICKET_ASSOCIATION_KEYS_BY_TOKEN[:related]%>' || association_type == '<%= TicketConstants::TICKET_ASSOCIATION_KEYS_BY_TOKEN[:assoc_parent]%>' || association_type == '<%= TicketConstants::TICKET_ASSOCIATION_KEYS_BY_TOKEN[:child]%>'){
      jQuery('.bulk_action_buttons .lnk_tkt_tracker_open_dropdown').addClass('hide');
      jQuery('#invoke_merge_popup').addClass('hide');
    }
    jQuery('#association_type').change(function(e){
      if(this.value == '<%= TicketConstants::TICKET_ASSOCIATION_KEYS_BY_TOKEN[:tracker]%>' || this.value == '<%= TicketConstants::TICKET_ASSOCIATION_KEYS_BY_TOKEN[:related]%>' || this.value == '<%= TicketConstants::TICKET_ASSOCIATION_KEYS_BY_TOKEN[:assoc_parent]%>' || this.value == '<%= TicketConstants::TICKET_ASSOCIATION_KEYS_BY_TOKEN[:child]%>'){
        jQuery('.bulk_action_buttons .lnk_tkt_tracker_open_dropdown').addClass('hide');
        jQuery('#invoke_merge_popup').addClass('hide');
      }else {
        jQuery('.bulk_action_buttons .lnk_tkt_tracker_open_dropdown').removeClass('hide');
        jQuery('#invoke_merge_popup').removeClass('hide');
      }
    })

    // For Any Group, we will remove Unassigned values from the list - loading
    if(jQuery(".group_text").attr("value") != "" && jQuery(".group_text").attr("value") == "any_group_id"){
      unassigned = jQuery('#any_group_id option[value="-1"]');
      var selectedVals = jQuery('#any_group_id').val();
      if(selectedVals && selectedVals.indexOf("-1") > -1){
        selectedVals.splice(selectedVals.indexOf("-1"), 1);
        jQuery('#any_group_id').val(selectedVals);
        jQuery('#any_group_id').trigger('change');
      }
      if(jQuery("#"+jQuery(".group_text").parent().attr("id")+" label.item input[value='-1']").length > 0){
        unassigned = jQuery("#"+jQuery(".group_text").parent().attr("id")+" label.item input[value='-1']").parent();

      }
      jQuery('#any_group_id option[value="-1"]').remove();
      jQuery("#"+jQuery(".group_text").parent().attr("id")+" label.item input[value='-1']").parent().remove();
      jQuery(".group_text.shared_filter_text").addClass('lengthier_text');
    }

    if(jQuery(".agent_text").attr("value") != "" && jQuery(".agent_text").attr("value") == "any_agent_id"){
      jQuery(".agent_text.shared_filter_text").addClass('lengthier_text');
    }else {
      jQuery(".agent_text.shared_filter_text").removeClass('lengthier_text');
    }

    jQuery(document).on("click.ticket_filter", ".wf_order_type, .wf_order", function(ev){
      ev.preventDefault();
      jQuery("#FilterOptions input[name="+this.className+"]").val(this.getAttribute(this.className)).trigger("change");
    });

    // For Any Group - on change
    jQuery(".agent_mode, .group_mode").off();
    jQuery(".agent_mode, .group_mode").on("click", function(ev,params){
      ev.preventDefault();
      jQuery(this).closest(".ff_item").attr("id", 'div_ff_'+this.getAttribute(this.className));
      jQuery(this).closest(".ff_item").attr("condition", this.getAttribute(this.className));
      jQuery(this).closest(".ff_item").attr("data-id", this.getAttribute(this.className));
      jQuery(this).closest(".fd-menu").css("display", "none");
      if(this.className == "agent_mode"){
        jQuery(".agent_mode .ticksymbol").remove();
        jQuery(".agent_text").text(jQuery(this).text());
        if(this.getAttribute(this.className) == "any_agent_id"){
          jQuery(".agent_text.shared_filter_text").addClass('lengthier_text');
        }else{
          jQuery(".agent_text.shared_filter_text").removeClass('lengthier_text');
        }
        jQuery(this).prepend("<span class='icon ticksymbol'></span>");
      }else{
        jQuery(".group_mode .ticksymbol").remove();
        jQuery(".group_text").text(jQuery(this).text());
        jQuery(this).prepend("<span class='icon ticksymbol'></span>");
        if(this.getAttribute(this.className) == "any_group_id"){
          jQuery(".group_text.shared_filter_text").addClass('lengthier_text');
          unassigned = jQuery('#'+selectedGroupTextId+' option[value="-1"]');
          var selectedVals = jQuery('#'+selectedGroupTextId).val();
          if(selectedVals && selectedVals.indexOf("-1") > -1){
            selectedVals.splice(selectedVals.indexOf("-1"), 1);
            jQuery('#'+selectedGroupTextId).val(selectedVals);
            jQuery('#'+selectedGroupTextId).trigger('change');
          }
          if(jQuery("#"+jQuery(".group_text").parent().attr("id")+" label.item input[value='-1']").length > 0){
            unassigned = jQuery("#"+jQuery(".group_text").parent().attr("id")+" label.item input[value='-1']").parent();
          }
          jQuery('#'+selectedGroupTextId+' option[value="-1"]').remove();
          jQuery("#"+jQuery(".group_text").parent().attr("id")+" label.item input[value='-1']").parent().remove();
        }else{
          jQuery(".group_text.shared_filter_text").removeClass('lengthier_text');
          if(jQuery('#'+selectedGroupTextId+' option[value="-1"]').length <= 0){
            if(jQuery("#" + jQuery(".group_text").parent().attr("id") + " label.item").length > 0){
              jQuery(".group_text").parent().append(unassigned);
            }else{
              jQuery('#' + selectedGroupTextId).append(unassigned);
            }
          }
        }
      }
      jQuery("#FilterOptions input[name="+this.className+"]").val(this.getAttribute("mode"));
      if(!jQuery(this).closest(".ff_item").data("fromFilters")){
        jQuery("#active_filter").addClass('unsaved');
      }
      jQuery(this).closest(".ff_item").data("fromFilters", false);
      if(params !== 'customTrigger')refresh_tickets();
    });

		jQuery(document).on("click.ticket_filter", ".toolbar_pagination a, .toolbar_pagination_full a", function(ev){
			ev.preventDefault();
			jQuery(document).scrollTop(0);
      count = +jQuery('#ticket_list_count').html();
      jQuery("#FilterOptions input[name=total_entries]").val(count);
			jQuery("#FilterOptions input[name=page]").val(getParameterByName("page", this.href)).trigger("change");
		});

    jQuery(document).on('pjax:beforeSend.ticket_filter', function () {
      jQuery(document).off('.ticket_filter');
    });

    if (jQuery('#ticket-list table tr').not('.headings').length == 0) {
      jQuery('#export_tickets').hide();
      jQuery('#empty_trash').hide();
    }

    <% if Account.current.launched?(:ticket_list_page_filters_cache) %>
      var fieldMap = <%= raw(TicketConstants::DASHBOARD_FILTER_MAPPING.to_json) %>;
      PopulateData.I18n_text.me = '<%= t("helpdesk.tickets.add_watcher.me") %>'
      PopulateData.I18n_text.mygroups = '<%= t("filter_options.mygroups") %>'
      PopulateData.I18n_text.unassigned = '<%= t("filter_options.unassigned") %>'
      TicketListSidebar.getParams(fieldMap,function(params){
          params.defaultDateRange = "<%= TicketConstants.created_date_range_default%>";
          params.sharedOwnershipFlag = <%= shared_ownership_enabled %>;
          PopulateFormData.init(params);
      });
    <% end %>

  });

  jQuery("#FilterOptions").change(function(){

    //close link popup
    if(jQuery('.popover.partialLeft').is(':visible')){
      jQuery(popup_target).popover('toggle');
    }

    <%
    # Select all should be persisted on pagination
    # but not when filter get changed, which is handled in change event of
    # .filter_item in ticket_list.js
    %>
    if(!jQuery("#all-views").data("selectallMode")) {
      jQuery("#helpdesk-select-all")
        .prop("checked", false)
        .trigger("change");
    }
    else {
      jQuery("#select_all_alert").hide();
    }
    jQuery("#ticket-list").html("<div class='sloading loading-small loading-block'></div>");
    jQuery.ajax({
      url: "/helpdesk/tickets/custom_search",
      type: "POST",
      dataType: "script",
      data: jQuery(this).serializeArray(),
      success: function(script){
        var all_view_selector = jQuery("#all-views");
        if(all_view_selector.data("selectallMode")) {
          jQuery("#helpdesk-select-all")
            .prop("checked", true)
            .trigger("click")
            .trigger("change");
          jQuery("#select_all_alert").show();
          all_view_selector.data("selectallMode", false);
          jQuery("#toggle_select_all").trigger("click");
        }
        jQuery("#FilterOptions input[name=total_entries]").val(0);

        if (jQuery('#ticket-list table tr').not('.headings').length == 0) {
          jQuery('#export_tickets').hide();
        } else {
          jQuery('#export_tickets').show();
        }
        // For highlighting updated and new tickets
        if(!updated_tickets) var updated_tickets = [];

        if (<%= @is_auto_refresh_feature %>){
          jQuery(updated_tickets.join(',')).addClass('ticket_highlight');
          updated_tickets = [];
          new_ticket_ids = [];
          updated_ticket_ids = [];
          jQuery("#update_message, #new_ticket_message").hide();
        }
      }
    });
  });
<% end %>
