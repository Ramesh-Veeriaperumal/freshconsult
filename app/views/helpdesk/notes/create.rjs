show_ajax_flash(page)

# to handle send and set status behaviour
item, @parent = ((@item.class == Helpdesk::Ticket) ? [@note, @ticket] : [@item, @parent])

#Getting the latest notes and appending
if params[:showing] == 'activities'
    @total_activities =  @parent.activities_count
    if !Account.current.launched?(:activity_ui_disable) and Account.current.features?(:activity_revamp)
    	page.insert_html :bottom, 'all_activities', render(:partial => "helpdesk/tickets/show/custom_activity", :collection => @activities)
    else
    	page.insert_html :bottom, 'all_activities', render(:partial => "helpdesk/tickets/show/activity", :collection => @activities)
    end
else
	@notes = @parent.conversation_since(params[:since_id]).reverse
	public_notes = @notes.select{ |note| note.private == false || note.incoming == true }
	page.insert_html :bottom, 'all_notes', render(:partial => "helpdesk/tickets/show/note", :collection => @notes)
	
  page << "trigger_event('note_created', #{to_event_data(item)} );"

  unless @parent.fb_post.blank?
    page << "jQuery('#parent_post_id').val('')" 
    page << "jQuery('#fb_form_title').html('#{@parent.requester.name}')"
    if item.fb_post.blank?
        page <<"jQuery.scrollTo('#noticeajax');"
    end
  end

	# Traffic cop related changes starts here
	page << "jQuery('#response_added_alert').remove()"
	page << "jQuery('.last_note_id').val(#{public_notes.last.id})" unless public_notes.empty? # Assigning the last public note id when added
	# Traffic cop related changes ends here

end

# Replacing the new quoted text back into the reply quoted textarea
page << "if(document.getElementById('cnt-reply-quoted')){"
page.replace_html 'cnt-reply-quoted', h(quoted_text(@parent))
page << "}"

#send and set response for ticket property update
page << "jQuery('#custom_ticket_form').data('send_and_set_resp', #{@send_and_set_response.to_json})" if @send_and_set_response