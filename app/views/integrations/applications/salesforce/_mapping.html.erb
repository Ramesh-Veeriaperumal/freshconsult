<div class="sf-title-wrapper">
  <label for="enble_sync"> Salesforce Sync </label> 
  <input type="checkbox" rel="toggle" name="enble_sync" id="enble_sync" data-checked-label="ON" data-unchecked-label="OFF" <% if @element_config['enble_sync'] == "on" %> checked=checked <% end %> onchange="change(this)">
</div>
<div class="field-mapping">
  <div id="field-wrap"></div>
  <div class="row-fluid" id="rule-list">
      <ul class="nav nav-flat">
        <li class="active">
          <a href="#company-mapping-tab" id="company-mapping-btn" data-toggle="tab">Company</a>
        </li>
        <li>
          <a href="#contact-mapping-tab" id="contact-mapping-btn"data-toggle="tab">Contact</a>
        </li>
      </ul>

    <div class="tab-content">
      <div class="tab-pane active" id="company-mapping-tab">
        <div class="contact-wrapper">
          <div class="contact-tabel-head">
            <div class="contact-tabel-data field-1"> <span class="field-1-text"> Freshdesk Fields </span> </div>
            <div class="contact-tabel-data field-2">
              <a class="center-icon"><%= font_icon "left-direction", { :size => 20 } %></a>
            </div>
            <div class="contact-tabel-data field-3"> <span> Salesforce Account Fields </span> </div>
          </div>
          <div rel="construct_company_rules" id="construct_company_rule" class="rules_wrapper" data-render-template = '.construct_company' ></div>
        </div>
      </div>

      <div class="tab-pane" id="contact-mapping-tab">
        <div class="contact-wrapper">
          <div class="contact-tabel-head">
            <div class="contact-tabel-data field-1"> <span class="field-1-text"> Freshdesk Fields </span> </div>
            <div class="contact-tabel-data field-2"> 
              <a class="center-icon"><%= font_icon "left-direction", { :size => 20 } %></a>
            </div>
            <div class="contact-tabel-data field-3"> <span> Salesforce Contact Fields </span> </div>
          </div>
          <div rel="construct_contact_rules" id="construct_contact_rule" class="rules_wrapper" data-render-template = '.construct_contact' ></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script class="construct_company" type="text/html" data-default-value = '<%= existing_companies.to_json.html_safe %>'>
    <% fd_company = @element_config["fd_company"] %>
    <%= select_tag('inputs[companies][][fd_field]', options_for_select(fd_company.collect{ |k,v| [v,k,{'data-field-type' => "text"} ]}), 
            { :class => "" , :rel => "dropdown", "data-refer-key" => 'fd_field', 'data-header-label' => ''}) %>
    <% sf_company = @element_config["account_fields"] %>
    <%= select_tag('inputs[companies][][sf_field]', options_for_select(sf_company.collect{ |k,v| [v,k,{'data-field-type' => "text"} ]}),  
            { :class => "" , :rel => "dropdown", "data-refer-key" => 'sf_field', 'data-header-label' => ''}) %>
</script>   

<script class="construct_contact" type="text/html" data-default-value='<%= existing_contacts.to_json.html_safe %>'>
  <% fd_contact = @element_config["fd_contact"] %>
  <%= select_tag('inputs[contacts][][fd_field]', options_for_select(fd_contact.collect{ |k,v| [v,k,{'data-field-type' => @element_config['fd_contact_types'][v]} ]}), 
          { :class => "" , :rel => "dropdown", "data-refer-key" => 'fd_field', 'data-header-label' => ''}) %>
  <% sf_contact = @element_config["contact_fields"] %>
  <%= select_tag('inputs[contacts][][sf_field]', options_for_select(sf_contact.collect{ |k,v| [v,k,{'data-field-type' => @element_config['contact_fields_types'][v]} ]}), 
            { :class => "" , :rel => "dropdown", "data-refer-key" => 'sf_field', 'data-header-label' => ''}) %>
</script> 

<script>
    var fdContactTypeValidator = {
                 "text": ["text", "string", "textarea", "paragraph"],
                 "paragraph": ["text", "string", "textarea", "paragraph"],
                 "email": ["email", "string"],
                 "phone_number": ["string", "number", "phonenumber", "mobilenumber"]
                };

    var sfContactTypeValidator ={
                  "string": ["text", "paragraph", "email"],
                  "date": ["custom_date"],
                  "number": ["phone_number"],
                  "boolean": ["checkbox"]
                };

    var maximumSelectionSizeContact = 10;
    var fdCompanyTypeValidator ={};         
    var sfCompanyTypeValidator ={};
    var maximumSelectionSizeAccount = 10;

    jQuery(function(){
     jQuery('[rel="construct_contact_rules"]').syncConstructRules({fdContactTypeValidator, sfContactTypeValidator, maximumSelectionSizeContact});
     jQuery('[rel="construct_company_rules"]').syncConstructRules({fdCompanyTypeValidator, sfCompanyTypeValidator, maximumSelectionSizeAccount});
    });
  
    // fdContactLabelTypes = {};
    // fdContactLabelTypes = <%=raw @element_config['fd_contact_types'].to_json%>;    
    // sfContactLabelTypes = {};
    // sfContactLabelTypes = <%=raw @element_config['contact_fields_types'].to_json%>;

    jQuery('#company-mapping-btn, #contact-mapping-btn').on('click', function(){
      if(validateFields()){
        return true;
      }else{
        return false;
      }
    });

    jQuery('#field-visibility-btn').on("click", function(e){
      if(!validateFields()){
        return false;
      }
      // else{
      //   //disabling those contact fields that are selected in the sync from the view
      //   var selectedSyncedContactFields = []; 
      //   jQuery('#construct_contact_rule .dropdown_2 .select2-chosen').each(function(){
      //     selectedSyncedContactFields.push(jQuery(this).text());
      //   });

      //   var selectedViewContactFields = [];
      //   jQuery('#contacts :selected').each(function(){
      //     selectedViewContactFields.push(jQuery(this).val());
      //   });

      //   jQuery("#contacts option").each(function(){
      //     var contactField = jQuery(this).text();
      //     if( contactField != 'Full Name') {
      //       if(selectedSyncedContactFields.indexOf(contactField) != -1){
      //         jQuery(this).attr("disabled", true);
      //       }else{
      //         //removing the disabled and selected attribute before creating select2
      //         jQuery(this).removeAttr("disabled");
      //         jQuery(this).removeAttr("selected");
      //       }
      //     }

      //     if(selectedViewContactFields.indexOf(jQuery(this).val()) != -1){
      //       //preselecting already selected values before doing select2
      //       jQuery(this).attr("selected", "selected")
      //     }
      //   });

      //   jQuery('#s2id_contacts .select2-choices').remove();
      //   jQuery("#contacts").select2({maximumSelectionSize: 10,removeOptionOnBackspace:false});
      //   jQuery("#sfcontacts .select2-search-choice-close").first().remove();

      //   //disabling those account fields that are selected in the sync from the view
      //   var selectedSyncedAccountFields = [];
      //   jQuery('#construct_company_rule .dropdown_2 .select2-chosen').each(function(){
      //     selectedSyncedAccountFields.push(jQuery(this).text());
      //   })

      //   var selectedViewAccountFields = [];
      //   jQuery('#accounts :selected').each(function(){
      //     selectedViewAccountFields.push(jQuery(this).val());
      //   });

      //   jQuery("#accounts option").each(function(){
      //     var accountField = jQuery(this).text();
      //     if(accountField != 'Account Name'){
      //       if(selectedSyncedAccountFields.indexOf(accountField) != -1){
      //         jQuery(this).attr("disabled", true);
      //       }else{
      //         //removing the disabled and selected attribute before creating select2
      //         jQuery(this).removeAttr("disabled");
      //         jQuery(this).removeAttr("selected");
      //       }
      //     }

      //     if(selectedViewAccountFields.indexOf(jQuery(this).val()) != -1){
      //       //preselecting already selected values before doing select2
      //       jQuery(this).attr("selected", "selected")
      //     }
      //   });

      //   jQuery('#s2id_accounts .select2-choices').remove();
      //   jQuery("#accounts").select2({maximumSelectionSize: 10,removeOptionOnBackspace:false});
      //   jQuery("#sfaccounts .select2-search-choice-close").first().remove();
      // }
    });

    function validateFields(){
      var valid = true;
      //checking for error in contact mapping fields
      jQuery('#construct_contact_rule .rules_list_wrapper .list').not('.overlay').find('.error').remove();
      jQuery('#construct_contact_rule .rules_list_wrapper .list').not('.overlay').each(function(index, list){
        var FDContactSelected = jQuery(this).find('.dropdown_1 .select2-chosen').text();
        var SFContactSelected = jQuery(this).find('.dropdown_2 .select2-chosen').text();
        if(FDContactSelected.toLowerCase() == "select"){

          jQuery(this).find('[data-refer-key=fd_field]').after("<p class='error'>select this value </p>");
          valid = false;
          return false;
        } 
        if(SFContactSelected.toLowerCase() == "select" ){
          jQuery(this).find('[data-refer-key=sf_field]').after("<p class='error'>select this value </p>");
          valid = false;
          return false;
        }
      });
      //checking for error in company mapping fields
      jQuery('#construct_company_rule .rules_list_wrapper .list').not('.overlay').find('.error').remove();
      if(valid){
        jQuery('#construct_company_rule .rules_list_wrapper .list').not('.overlay').each(function(index, list){
          var FDCompanySelected = jQuery(this).find('.dropdown_1 .select2-chosen').text();
          var SFCompanySelected = jQuery(this).find('.dropdown_2 .select2-chosen').text();
          if(FDCompanySelected.toLowerCase() == "select"){

            jQuery(this).find('[data-refer-key=fd_field]').after("<p class='error'>Field is required. </p>");
            valid = false;
            return false;
          } 
          if(SFCompanySelected.toLowerCase() == "select" ){
            jQuery(this).find('[data-refer-key=sf_field]').after("<p class='error'>Field is required. </p>");
            valid = false;
            return false;
          }
        });
      }

      if(valid){
        return true;
      }else{
        return false;
      }
    }
    jQuery(document).ready(function(){
      //setting first 3 contact fields as compulsary and  disabled
      jQuery('#construct_contact_rule .rules_list_wrapper .list').slice(0,4).each(function(){
        jQuery(this).find('.list-icon').remove();
        jQuery(this).find('.select2-choice').addClass('disabled');
        jQuery(this).addClass('overlay');
      });
      //setting the first field of account as compulsary and  disabled
      jQuery('#construct_company_rule .rules_list_wrapper .list').slice(0,1).each(function(){
        jQuery(this).find('.list-icon').remove();
        jQuery(this).find('.select2-choice').addClass('disabled');
        jQuery(this).addClass('overlay');
      });
    });

  // jQuery('body').on('click', '#field-mapping-btn', function(){    

  //   var selectedviewContactFields = [], selectedSyncedContactFields = [];
  //   jQuery("#contacts :selected").each(function(){
  //     selectedviewContactFields.push(jQuery(this).val()); 
  //   });  

  //   jQuery('#construct_contact_rule .dropdown_2 .select2-chosen').each(function(){
  //     selectedSyncedContactFields.push(jQuery(this).text());
  //   });

  //   jQuery("#contacts option").each(function(){
  //     if(selectedSyncedContactFields.indexOf(jQuery(this).text()) != -1){
  //       selectedviewContactFields.push(jQuery(this).val());
  //     }  
  //   });

  //   var syncContact = constructContact.data("syncConstructRules");
  //   syncContact.removeVisibilityValues(selectedviewContactFields);

  //   var selectedviewAccountFields =[], selectedSyncedAccountFields =[];
  //   jQuery("#accounts :selected").each(function(){
  //     selectedviewAccountFields.push(jQuery(this).val());
  //   });

  //   jQuery('#construct_company_rule .dropdown_2 .select2-chosen').each(function(){
  //     selectedSyncedAccountFields.push(jQuery(this).text());
  //   });

  //   jQuery("#accounts option").each(function(){
  //     if(selectedSyncedAccountFields.indexOf(jQuery(this).text()) != -1){
  //       selectedviewAccountFields.push(jQuery(this).val());
  //     }  
  //   });

  //   var syncCompany = constructCompany.data("syncConstructRules");
  //   syncCompany.removeVisibilityValues(selectedviewAccountFields);
  // });
  
</script>