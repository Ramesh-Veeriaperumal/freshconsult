<form class="hc-search-form" autocomplete="off" id="hc-search-form">
	<div class="hc-search-input">
		<input placeholder="Enter your search term here..." type="text" class="special" id="PageSearch">
		<div class="search-autocomplete" id="search-autocomplete"></div>
	</div>
	<div class="hc-search-button">
		<button class="btn btn-primary" type="button" autocomplete="off">
			<i class="mobile-icon-search hide-tablet"></i>
			<span class="hide-in-mobile">
				{% translate header.search %}
			</span>
		</button>	
	</div>
</form>


<script type="text/javascript">
jQuery(document).ready(function(){
        var cache = {};
		jQuery( "#PageSearch" ).autocomplete({
        	minLength: 0,
        	appendTo: "#search-autocomplete",
        	source: function( request, response ) {        		
                var term = request.term;
                if ( term in cache ) {
                    response( cache[ term ] );
                    return;
                }

                request['search_key'] = request.term
 				delete request.term
                jQuery.getJSON( "/support/search/suggest", request, function( data, status, xhr ) {
                    cache[ term ] = data;
                    response( data );
                });
            },
            focus: function( event, ui ) { event.preventDefault() }
        }).on( "autocompleteselect", function( event, ui ) { window.location = ui.item.url } )

        jQuery( "#PageSearch" ).data( "autocomplete" )._renderItem = function( ul, item ) {
            return jQuery( "<li>" )
                .data( "item.autocomplete", item )
                .append("<a href='"+item.url+"'>" + item.label + "</a>")
                .append('<span class="label label-small label-light">'+ item.group +'</span>')
                .addClass(item.type+'-item')
                .appendTo( ul )
        }

        jQuery( "#PageSearch" ).data( "autocomplete" )._renderMenu = function( ul, items ) {
			var that = this
			jQuery.each( items, function( index, item ) {
				that._renderItemData( ul, item )
			})
		}
 //  var currentactive,
 //      position   	= -1, 
 //      insideSearch 	= false;
 //      currentString = "";
      
 //  callbackToSearch = function(string){    
 //    jQuery.ajax({ 	url: "/support/search/suggest?search_key="+string,
 //                	success: function(data){
 //                  		// console.log(data);
 //                        // if(string == jQuery("#PageSearch").val()){
 //                              jQuery("#search-autocomplete").css("display", "block"); 
 //                              position   = -1;
 //                              jQuery("#search-autocomplete").html(data);
 //                              jQuery("#hc-search-form").addClass("active");
 //                        // }
 //                          }});
 //                        }
			
	// 		jQuery("#search-autocomplete a").live("click", function(){
	// 			window.location = this.href; 
	// 		});
			
	// 		jQuery("#search-autocomplete a").live("hover", function(){
	// 			jQuery(currentactive).removeClass("active");
	// 			currentactive = jQuery(this).addClass("active");
	// 		});
			
	// 		jQuery("#search-autocomplete")
	// 			.hover(function(){
	// 				insideSearch = true;
	// 			}, function(){
	// 				insideSearch = false;
	// 			});
			
	// 		jQuery("#PageSearch").bind("focusout", function(ev){ 
	// 			if(!insideSearch){
	// 				jQuery("#search-autocomplete").hide();
	// 			  	jQuery("#search-autocomplete").removeClass("active");
	// 			  	jQuery("#hc-search-form").removeClass("active");
				  	
	// 			}
	// 		});
			
	// 		jQuery("#PageSearch").bind("focusin", function(ev){
	// 			searchString = this.value.replace(/^\s+|\s+$/g, "");
	// 			jQuery("#SearchBar").addClass("active");
	// 			if(searchString != ''){
	// 				jQuery("#search-autocomplete").css("display", "inline");
	// 				jQuery("#hc-search-form").addClass("active");
	// 			}
	// 		}); 
			
	// 		var move = function(diff){
	// 			searchlist 	= jQuery("#search-autocomplete a");
	// 			jQuery(currentactive).removeClass("active");
	// 			position = Math.min((searchlist.size()-1), Math.max(0, position + diff)); 
	// 			currentactive = jQuery(searchlist.get(position)).addClass("active"); 
	// 		};
			
	// 		var executeAction = function (keyCode){
	// 			 switch (keyCode) {
 //          case 40:
 //            move(1); 
 //          break;
 //          case 38:
 //            move(-1); 
 //          break;
	// 				case 13:
	// 					jQuery(currentactive).trigger("click");
 //          break; 
	// 			}
	// 		} 
			
	// 		jQuery("#PageSearch").bind("keyup", function(e){
	// 			 switch (e.keyCode) {
	// 			 	case 40:
	// 				case 38:
	// 				case 13:
	// 					executeAction(e.keyCode);
	// 					e.preventDefault();
	// 				break;
	// 				default:
	// 					searchString = this.value.replace(/^\s+|\s+$/g, "");
	// 					if(searchString != '' && searchString.length > 1 && currentString != searchString){
	// 						// delay(function(){
	// 					      callbackToSearch(searchString);
	// 					      currentString = searchString;
	// 					    // }, 100 ); 
	// 					}else{
	// 						jQuery("#search-autocomplete").hide();		
	// 						jQuery("#hc-search-form").removeClass("active");		
	// 					}
	// 				break;
	// 			}
	// 		});
	});
</script>