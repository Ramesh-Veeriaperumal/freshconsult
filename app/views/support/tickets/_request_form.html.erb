<% @ticket ||= current_account.tickets.new %>
<% @ticket.build_ticket_body %>
<% @ticket.email = current_user.email if current_user %>
<% cache_options = {}%>
<% skip_frag_cache = params && params['action']!= 'new' %>
<%= form_for @ticket, :url => support_tickets_path, :html => { :multipart => true,
    :class => "form-portal ticket-form", :rel => "validate" } do |f| %>
  <%= f.error_messages %>

  <% enable_fragment_cache(:support_new_ticket, skip_frag_cache) do %>
    <% current_portal.customer_editable_ticket_fields(true).each do |field|
        next if field.section_field? || field.exclude_encrypted_field? || field.field_type.eql?('custom_file')
      %>
      <div class="control-group <%= " hide company_container" if field.field_type == "default_company" %>" >
        <%= ticket_field_container f,:helpdesk_ticket, field,
              helpdesk_ticket_values(field,@params), nil, {:pre_fill_flag => false}%>
      </div>
      <% if field.has_section?
        field.picklist_values.each do |picklist|
          next if picklist.section.blank? %>
          <textarea class="picklist_section_<%=picklist.id%> hide">
            <% picklist.section_ticket_fields.each do |section_tkt_field|
              if section_tkt_field.editable_in_portal %>
                <div class="control-group ticket_section">
                  <%= (ticket_field_container f,:helpdesk_ticket, section_tkt_field,
                                        helpdesk_ticket_values(section_tkt_field,@params), picklist.id.to_s).gsub("</textarea>", "&lt/textarea&gt") %>
                </div>
              <% end
            end %>
          </textarea>
        <% end
      end %>
    <% end %>
  <% end %>
<!-- block ends here for fragment cache -->
  <% if show_captcha?(feature?(:captcha)) %>
    <div class="control-group">
        <div class="controls recaptcha-control">
          <%= recaptcha_tags :display => { :theme => "white" } %>
        </div>
    </div>
  <% end %>
  <%# Any fields named like meta[fieldname] will be saved by the helpdesk as metadata %>
  <%= hidden_field_tag "meta[user_agent]", request.env["HTTP_USER_AGENT"] %>
  <%= hidden_field_tag "meta[seen_articles]" %>
  <%
    referrer = h(request.referrer)
  %>
  <%= hidden_field_tag "meta[referrer]", referrer %>

  <div class="form-actions">
		<%= f.submit t('ticket.submit_ticket'), :class => "btn btn-primary" %>
		<%= link_to t("cancel"), support_home_path, :class => "btn" %>
	</div>

  <% cache_options = fragment_cache_dom_options f %>
  <%= cache_options[:cc_container] if cache_options[:cc_container].present? %>
<% end %>

<%= javascript_tag do %>
  (function($){
    var populateRequestForm = function(){
      var requester_input = $('#helpdesk_ticket_email');
      <% if current_account.launched?(:support_new_ticket_cache) && current_user.present?%>

        if(<%=cache_options[:company_cache_condition]%> && $('#helpdesk_ticket_company_id').length == 0){
          var company_container = $('<div>', { 'class': 'control-group hide company_container' });
          company_container.html('<%= cache_options[:company_container].gsub(/\r?\n/,'').html_safe %>')
            .insertAfter(requester_input);
        }
        if(<%= cache_options[:cc_cache_condition] %>){
          if($('#add-cc-button').length == 0){
            requester_input.parent().append('<a href="#" data-toggle-dom="#cc-emails" data-toggle-text="<%= t('helpdesk.shared.hide_cc') %>" id="add-cc-button"><%= t('helpdesk.shared.addcc') %></a>')
              .after($('#cc-emails'));
          }
          else{
            $('#cc-emails').remove();
            requester_input.parent().after($('#cc-emails'));
          }
        }
        else{
          $('.cc-emails, #add-cc-button').remove();
        }

        var repaint_store_data = <%= get_portal_store_data.html_safe %>
        var repaint_map = {'group': '#helpdesk_ticket_group_id', 'agent': '#helpdesk_ticket_responder_id'};
        for( var key in repaint_map){
          var element = $(repaint_map[key]);
          if(element.length == 0)continue;
          var emptyOption = $('<option>', {val: "", text: "..."});
          var options = repaint_store_data[key].map(function(value, i){
              return $('<option>', { val: value.id, text: value.name });
          });
          options.unshift(emptyOption);
          element.html(options);
        }
      <% end %>
      requester_input.val('<%= current_user.email if current_user.present? %>').trigger('focusout');
    };
    jQuery(document).ready(function(){
      populateRequestForm();
      jQuery('#meta_referrer').val(document.referrer.escapeHTML());
      <% if feature?(:auto_suggest_solutions) && allowed_in_portal?(:open_solutions) && current_account.allow_auto_suggest_solutions_enabled? %>
        callbackToSolutionSearch = function(string){
          var search_url = encodeURI("/<%= Language.current.code %>/support/search/solutions?max_matches=5&term="+string)
          jQuery.ajax({ url: search_url,
            dataType: 'json',
            success: function(data){
                var search_items = jQuery("<ul class='unstyled'>")
                jQuery.each(data, function(i, item){
                  jQuery( "<li>" )
                    //.append('<span class="label label-small label-light ">'+ item.group +'</span>')
                    .append("<a href='"+item.url+"'>" + item.title + "</a> ")
                    .append('<p class="max-search-content">'+ item.desc +'</p>')
                    //.addClass(item.type.toLowerCase()+'-item')
                    .appendTo( search_items )
                })
                if(data.length > 4){
                  jQuery("<li>")
                    .append("<a class='search-results-link'>" + "<%= I18n.t('widgets.feedback_widgets.new.show_all_results') %>" + "</a> ").appendTo( search_items )
                }
                if(data.length > 0){
                  jQuery("#new-ticket-search")
                    .html(search_items)
                    .prepend("<h4><%= I18n.t('portal.tickets.related_articles') %></h4>")
                    .show()
                }
                jQuery('.search-results-link').attr('href', search_url);
                jQuery("#helpdesk_ticket_subject").removeClass("sloading loading-small loading-right");
              }
            });
          }

          jQuery("#helpdesk_ticket_subject").on("blur", function(ev){
              var searchString = this.value.replace(/^\s+|\s+$/g, "");
              if(searchString != '' && searchString.length > 1){
                jQuery(this).addClass("sloading loading-small loading-right");
                callbackToSolutionSearch(searchString);
              }else{
                jQuery(this).removeClass("sloading loading-small loading-right");
              }
          });
      <% end %>
      if( jQBrowser.desktop ){
        <% if logged_in? %>
          invokeRedactor('helpdesk_ticket_ticket_body_attributes_description_html', 'ticket');
        <% else %>
          invokeRedactor('helpdesk_ticket_ticket_body_attributes_description_html');
        <% end %>
      }

        var focus_element = Form.findFirstElement(document.forms[0]);
        if ($(focus_element).prop('id')  == "helpdesk_ticket_ticket_body_attributes_description_html"){
          jQuery(focus_element).data('redactor').$editor.focus();
        }
        else{
          Form.focusFirstElement(document.forms[0]);
        }

      jQuery(".dynamic_sections")
        .on("change", function(e){
          var id;
          var $el = jQuery(this);
          var selected = $el.find(':selected');
          if (selected.length > 0){
            id = selected.data().id;
          }
          var nextElements = $el.closest('div.control-group').nextAll();
          nextElements.each(jQuery.proxy(function(index, dataItem){
            if (jQuery(dataItem).hasClass('ticket_section'))
              dataItem.remove();
            else
              return false;
          },this));
          var element = jQuery('.picklist_section_'+id).parent();
          if(element.length != 0) {
            jQuery(jQuery('.picklist_section_'+id).val()
                  .replace(new RegExp('&lt', 'g'), '<')
                  .replace(new RegExp('&gt', 'g'), '>'))
                .insertAfter(jQuery("#"+this.id).parents('.control-group'));
          }
      });
      jQuery(".dynamic_sections").trigger('change');
      jQuery('[id^="helpdesk_ticket_custom_field_"]').val("").trigger('change');

      jQuery('[id^="helpdesk_ticket_custom_field_"][type*="checkbox"]').val(1).trigger('change');
    });



    jQuery("#helpdesk_ticket_email").focusout(function(){
      var ticket_email = jQuery("#helpdesk_ticket_email").val();
      if(<%= current_user.present? && current_user.contractor? %>){
        jQuery.ajax({
          type: 'POST',
          data: {email : ticket_email},
          datatype: 'json',
          url: "<%= helpdesk_commons_user_companies_path %>",
          success: function(data){
            if(data != false){
              jQuery('#helpdesk_ticket_company_id').empty();

              jQuery.each(data, function(key, val){
                jQuery("<option/>").val(val[1]).html(val[0]).appendTo("#helpdesk_ticket_company_id");
              });

              if(!jQuery("#cc_emails").hasClass("non_company_ccs")){
                jQuery("#helpdesk_ticket_company_id").on("change", function(){
                  jQuery("#cc_emails_filter").select2('val', '').empty();
                });
              }

              jQuery('#helpdesk_ticket_company_id').val('').change();
              jQuery('.company-label').parent().insertAfter(jQuery("#helpdesk_ticket_email"));
              jQuery('#helpdesk_ticket_company_id').removeAttr("disabled");
              jQuery('.company-label').parent().slideDown();
              jQuery('#add-cc-button').slideDown();
            }else{
              jQuery('#helpdesk_ticket_company_id').attr("disabled", true);
              jQuery('.company-label').parent().slideUp();
              if(<%= @company_cc_in_portal.present? %>)
                jQuery('#add-cc-button, #cc-emails').slideUp();
            }
          }
        });
      }
    }).trigger("focusout");

    jQuery('#new_helpdesk_ticket [type=submit]').click(function(event) {
      var _form = jQuery('#new_helpdesk_ticket');
      var validForm = _form.valid();
      _form.find('.datepicker_popover').each(function(index) {
        validForm = jQuery(this).valid() && validForm;
      });

      <%# setting cancel class will prevent the form submitting via formvalidate plugin.cancelling form submit event doesnt work for this case. %>
      if(validForm) {
        jQuery(this).removeClass('cancel');
      } else {
        jQuery(this).addClass('cancel');
        return false;
      }

      var cc_emails = _form.find('input[name="cc_emails"]')
      var cc_emails_val = cc_emails.val()
      if (cc_emails_val && cc_emails_val.split(",").length >= 50) {
        alert('You can add upto 50 CC emails');
        return false;
      }

      if(getFromSessionStorage('seenArticlesArray') && getFromSessionStorage('seenArticlesArray').length > 0){
        var _seenArticles = getFromSessionStorage('seenArticlesArray').slice().splice(-50); // only taking last 50 items
        jQuery('#meta_seen_articles').val(JSON.stringify(_seenArticles));
        removeFromSessionStorage('seenArticlesArray');
      }
      _form.find("button, a.btn").attr('disabled',true);
      <% if current_account.session_replay_enabled? && current_account.account_additional_settings.freshmarketer_linked? %>
        if(typeof window.FM !== 'undefined') {
          var requester_email = jQuery('#helpdesk_ticket_email').val();
          window.FM.identify(requester_email);
          console.log('Session identified: ' + requester_email);
        }
      <% end %>
    });

  })(jQuery);
<% end %>
