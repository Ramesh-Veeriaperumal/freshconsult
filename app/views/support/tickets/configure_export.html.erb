<% form_tag({:action => :export_csv, :a => params[:a], :i => params[:i] }, { :method => :post, :id => 'exportFilter' }) do %>
  	<input type="hidden" name="data_hash" value="" />
	<div class="alert"><%=t('export_data.info')%></div>
	<fieldset>		
		<div class="row-fluid">
			<div class="span4">
				<label class="control-label"><b><%=t('export_data.filter_label_customer')%></b></label>
				<%= select_tag "date_filter", options_for_select(TicketConstants::CREATED_BY_OPTIONS), :class => "dropdown" %>
			</div>
			<div id="datepicker" class="hide">
	 			<div class="span4">	
	 				<label>From</label>
					<input type="text" placeholder="<%=t('export_data.from')%>" id="start_date" date="" name="start_date" class="text auto" size="15" />
				</div>
				<div class="span4 omega">
					<label>To</label>
					<input type="text" placeholder="<%=t('export_data.to')%>" id="end_date" date="" class="text auto" name="end_date" size="15" />
				</div>
			</div>
		</div>
		</fieldset>
		<fieldset>
		<div class="control-group">
			<label><b>Select fields to export</b></label>
			<div class="alert alert-error hide" id="err_no_fields_selected"> <%= t('export_data.no_fields_selected') %> </div>
			<div class="row-fluid threecol-form" id="ticket_fields">
	 			<% @csv_headers.each do |head| %>
	 			  	<div class="span4 <%= head[:type] %> <%= cycle("", "", "omega") %>">
		  				<label class="checkbox"> 
		    				<%= check_box_tag "export_fields[#{head[:label]}]", head[:value], head[:selected] %> 
							<%= head[:label] %>														
		  				</label>
		  				<% head[:levels].each do |level| %>
			  				<label class="checkbox prime nested-child"> 
			    				<%= check_box_tag "export_fields[#{level[:label]}]", level[:name], false  %> 
								<%= level[:label] %>
			  				</label>
			  			<% end %>
	  			    </div>	
	 			<% end %>
			</div>
		</div>
	</fieldset>
<%end%>

<% javascript_tag do %>
  jQuery("#exportFilter").submit(function() { 
	if (jQuery('#ticket_fields :checked').length == 0) {
		jQuery('#err_no_fields_selected').removeClass('hide');
		return false;
	} else {
		jQuery('#err_no_fields_selected').addClass('hide');		
	 	getFilterData();
		jQuery("#exportFilter input[name=data_hash]").val(query_hash.toJSON());
		jQuery("#export-to-csv").button('loading')
		setTimeout(function(){			
			jQuery("#export-to-csv").button("reset");
		}, 1000);
	}
	//return false;
  });

	jQuery("#export-to-csv")
		.button()
		.live("click", function(ev){
			jQuery("#exportFilter").submit();
		});

	jQuery("#date_filter").change(function(){
		jQuery("#datepicker").toggle(jQuery("#date_filter").val() == "<%=TicketConstants::CREATED_BY_KEYS_BY_TOKEN[:custom_filter]%>");
	});

	jQuery("div.nested_field label.prime").change(function(ev){  	
		_condition = !jQuery(this).children("input").prop("checked");
		jQuery(this).siblings(".level").children("input").prop({ "checked": !_condition });
	});

  var date_today = new Date();
  jQuery(document).ready(function() {
		var dates = jQuery( "#start_date, #end_date" ).datepicker({
			changeMonth: true, 
			changeYear: true,
			numberOfMonths: 1,
			maxDate: "today",
			onSelect: function( selectedDate ) {
				var option = this.id == "start_date" ? "minDate" : "maxDate",
					instance = jQuery( this ).data( "datepicker" ),
					date = jQuery.datepicker.parseDate(
						instance.settings.dateFormat ||
						jQuery.datepicker._defaults.dateFormat,
						selectedDate, instance.settings );
				dates.not( this ).datepicker( "option", option, date );
				jQuery(this).prop("date", date);
			}
		});
		
		jQuery("#start_date").val((date_today.getMonth()) + '/' + date_today.getDate() + '/' + date_today.getFullYear());
		jQuery("#end_date").val((date_today.getMonth()+1) + '/' + date_today.getDate() + '/' + date_today.getFullYear());		
		
	});
<% end %>
