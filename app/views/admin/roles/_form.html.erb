<% remove_manage_availability = !current_account.features?(:round_robin) %>
<% edit_action = edit?
agent_type_options = Account.current.agent_types_from_cache.map do |agent_type| [t("agent." + agent_type.label), agent_type.agent_type_id, {class: "agent-type-" + agent_type.agent_type_id.to_s}] end
agent_privileges = Helpdesk::AgentTypes::AGENT_TYPE_ID_PRIVILEGE_MAPPING
default_agent_type = Helpdesk::AgentTypes::SUPPORT_AGENT_ID
default_privileges = Helpdesk::AgentTypes::AGENT_TYPE_ID_PRIVILEGE_MAPPING[default_agent_type]
collaboration_roles_enabled = current_account.collaboration_roles_enabled? %>
<%= error_messages_for :role %>
<div class="row-fluid new-role">
	<div>
		<ul class="clearfix unstyled">
 			<li class="row-fluid">
 				<%= role_form.label :name, ("<b>"+t('name')+"<span class='required_star'>*</span></b>").html_safe, :class =>'control-label span2' %>
				<div class="span10">
					<%= role_form.text_field :name , :class => "text required", :placeholder => t('admin.roles.role_name')%>
				</div>
			</li>
			<li class="row-fluid">
				<%= role_form.label :description, ("<b>"+t('description')+"</b>").html_safe, :class =>'control-label span2' %>
				<div class="span10">
					<%= role_form.text_area :description , :class => "text", :cols => "40", :rows => "5", 						:placeholder => t('admin.roles.role_description')%>
				</div>
			</li>
      <% if collaboration_roles_enabled %>
        <% if agent_type_options.length > 1 %>
          <li class="row-fluid">
            <%= role_form.label :agent_type, ("<b>"+t('agent.type')+"</b>").html_safe, :class =>'control-label span2' %>
            <div class="span10 agent-type-select">
            <%= select_tag "role[agent_type]", options_for_select(agent_type_options, role.agent_type), class: "select2", id: "agent-type", disabled: edit_action %>
            </div>
          </li>
          <li class="row-fluid">
            <div class="span2"></div>
            <div class="span10">
              <p class="agent-type-info"><%= t('admin.roles.agent_type_info') %></p>
            </div>
          </li>
        <% else %>
          <%= hidden_field_tag "role[agent_type]", role.agent_type || default_agent_type %>
        <% end %>
      <% end %>
      <li class="row-fluid">
        <%= role_form.label :agents, ("<b>"+t('agents')+"</b>").html_safe, :class =>'control-label span2' %>
        <div class="span10">
					<% label = (@role.users.count == 0 ? t('admin.roles.add_label') : t('admin.roles.manage_label')) %>
					<a class="popup" data-isaccadmin="<%= @role.privilege?(:manage_account) %>" data-agentcount="<%= @role.users.count %>" data-roleid="<%= @role.id %>" href="javascript:void(0)" data-title="<%= @role.name %>">
         <span data-changecount="<%= @role.id %>" >
          <% if @role.users.count == 0 %>
            <%= t('admin.roles.no_agent_label') %></span> - <span class="label-info-text"><%= label %></span>
          <% else %>
           <%= pluralize(@role.users.count, t('admin.roles.agent_label'), t('admin.roles.agents_label')) %> </span> - <span class="label-info-text"><%= label %></span>
          <% end %>
					</a>
        </div>
      </li>
		<div>
			<p class="lead-title lead">
				<span><%= t('admin.roles.permissions')%></span>
			</p>
		</div>
	</div>
	<div class="row-fluid">
		<ul class="role-nav">
			<li><%= t('admin.roles.scroll.scroll_to')%></li>
			<li><a href="#tickets"><%= t('admin.roles.scroll.tickets').html_safe%></a></li>
			<li><a href="#solutions"><%= t('admin.roles.scroll.solutions').html_safe%></a></li>
			<li><a href="#forums"><%= t('admin.roles.scroll.forums').html_safe%></a></li>
      <% if current_account.support_bot_enabled? || current_account.autofaq_enabled? %>
        <li><a href="#bots"><%= t('admin.roles.scroll.bots').html_safe%></a></li>
      <%end%>
			<li><a href="#customers"><%= t('admin.roles.scroll.customers').html_safe%></a></li>
      <% if current_account.field_service_management_enabled? %>
        <li><a href="#fieldservice"><%= t('admin.roles.scroll.fieldservice').html_safe%></a></li>
      <%end%>
			<li><a href="#reports"><%= t('admin.roles.scroll.reports').html_safe%></a></li>
			<li><a href="#admin"><%= t('admin.roles.scroll.administration').html_safe%></a></li>
      <li><a href="#general"><%= t('admin.roles.scroll.general').html_safe%></a></li>
		</ul>
	</div>

  <%= build_role_form %>

  <%= hidden_field_tag "role[privilege_list][]"%>
  <%= hidden_field_tag "add_user_ids" %>
  <%= hidden_field_tag "delete_user_ids" %>

</div>
<div class="button-container pull-right clearfix itil-hide">
  <% unless @role.default_role? %>
    <%= link_to t('cancel'), admin_roles_path, :class => "btn"%>
    <%= role_form.submit t('save'), :class => "btn btn-primary", 'data-loading-text' => t('saving')%>
  <% end %>
</div>

<%= javascript_tag do %>
  /* Scroll functionality */

  jQuery(function(){ // document ready
    if(<%= remove_manage_availability %>) {
      jQuery(".operational_admin#manage_availability").parent().remove();
      jQuery(".admin_tasks#manage_availability").parent().remove();
    }

  	jQuery('a[href*="#"]:not([href="#"])').click(function() {
  	    if (location.pathname.replace(/^\//,'') == this.pathname.replace(/^\//,'') 
  	        || location.hostname == this.hostname) {

  	        var target = jQuery(this.hash);
  	        target = target.length ? target : jQuery('[name=' + this.hash.slice(1) +']');
  	           if (target.length) {
  	             jQuery('html,body').animate({
  	                 scrollTop: target.offset().top
  	            }, 1000);
  	            return false;
  	        }
  	    }
  	});
  });

  (function($) {
    $.fn.toggleDisabled = function(status){
        return this.each(function(){
          // special case, edit notes
          if(!($(this).hasClass('permanent_disable')))
          {
            this.disabled = !(status === true && hasPrivilege(this.id))
          }
          if(status == false)
          {
            if(this.type == "radio" && $(this).hasClass('default'))
              this.checked = true;
            else
              this.checked = false;
            // recursively call for all child values
            if($(this).hasClass('nested'))
            {
              $('input.' + this.id).toggleDisabled(status);
            }
          }
          if($(this).hasClass('option_permanent_disabled')){
            this.disabled = true
          }
        });
    };

    $.fn.radioGroupToggleDisabled = function(status){
        return this.each(function(){
          if($(this).hasClass('nested'))
          {
            $('input.' + this.id).toggleDisabled(false);
          }

        });
    };

    /* Load the default values for radio button groups on page load */
    let assignDefaultsForRadioBtns = function (resetDefaults = false) {
      var radio_groups = {}
      $(":radio").each(function(){
        radio_groups[this.name] = true;
      })

      for(group in radio_groups){
        checked = resetDefaults ? true : !$(":radio[name='"+group+"']:checked").length;
        if(checked)
        {
          $(":radio[name='" + group + "'].default").prop('checked', true);
        }
      }
    };

    let hasPrivilege = function (id) {
      if (<%= !collaboration_roles_enabled %>) {
        return true;
      }
      let allPrivileges = JSON.parse('<%= raw(default_privileges.to_json) %>');
      let agentTypePrivileges = JSON.parse('<%= raw(agent_privileges.to_json) %>');
      let selectedAgentType = $("#agent-type").val() || <%= default_agent_type %>;
      return allPrivileges.includes(id) ?  agentTypePrivileges[selectedAgentType].includes(id) : true;
    };

    let checkAgentTypePrivileges = function (edit) {
      $(".role-privilege").each(function() {
        if (hasPrivilege(this.id)) {
          if ($(this).attr('disabled')) {
              $(this).removeAttr('disabled');
          }
        } else {
          $(this).attr('disabled', true);
        }
        if (this.checked && !edit) {
          $(this).prop('checked', false);
        }
      });
    };

    let disableNestedChilds = function () {
      $(".nested-child").each(function(){
        if (!$(this).hasClass('edit_note')) {
          $(this).attr('disabled', true);
        }
      });
      $(".permanent_disable").each(function() {
         this.disabled = true;
         this.checked = true;
      });
    }

    let onAgentTypeChange = function (edit, initialLoad) {
      let newRole = initialLoad && !edit;
      checkAgentTypePrivileges(edit);
      assignDefaultsForRadioBtns(newRole);
      disableNestedChilds();
    }

    $('#role_form').submit( function(ev) {

      /* If none of the children of operational admin is checked
         then disable operational admin */

      if($('input.operational_admin:checked').length == 0)
      {
        $('#operational_admin').prop({'checked': false, 'disabled': true });
      }

      /* Before form submit, take all the values from checked
         radio buttons and load it into hidden field with the
         specified name */

      $.each($('input:radio:checked'), function() {
        $('<input>').attr({
          type: 'hidden',
          name: 'role[privilege_list][]',
          value: $(this).val()
        }).appendTo('#role_form');
        $(this).removeAttr('name');
      });

    });

    $(document).ready(function() {

      /* If element has children and state changes */

      $('input.nested:checkbox, input.nested:radio').change(function() {
        $('input.' + this.id).toggleDisabled(this.checked);
      });

      /* If radio state changes, then change state of other
         radio buttons in the group, mainly for the admin set */

      $('input:radio').change(function() {
        $("input[name = '" + this.name + "']:unchecked").radioGroupToggleDisabled(this.checked);
      });

      /* Special case, edit notes */

      $('input.permanent_disable').each(function(){
          this.disabled = true;
          this.checked = true;
          if($(this).hasClass('nested'))
            $('input.' + this.id).prop('disabled', false);
      });

      <% if collaboration_roles_enabled %>
        $("#agent-type").change(function() {
          onAgentTypeChange(<%= edit_action %>, false);
        });
        onAgentTypeChange(<%= edit_action %>, true);
      <% else %>
        assignDefaultsForRadioBtns();
      <% end %>

    });

  })(jQuery);

<% end %>
