#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module HelpdeskActivities
  module EventType
    SYSTEM = 0
    USER = 1
    ALL = 2
    VALUE_MAP = {0 => "SYSTEM", 1 => "USER", 2 => "ALL"}
    VALID_VALUES = Set.new([SYSTEM, USER, ALL]).freeze
  end

  class TicketDetail
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ACCOUNT_ID = 1
    OBJECT = 2
    OBJECT_ID = 3
    EVENT_TYPE = 4
    SHARD_NAME = 5
    COMPARATOR = 6
    RANGE_KEY = 7

    FIELDS = {
      ACCOUNT_ID => {:type => ::Thrift::Types::I64, :name => 'account_id'},
      OBJECT => {:type => ::Thrift::Types::STRING, :name => 'object'},
      OBJECT_ID => {:type => ::Thrift::Types::I64, :name => 'object_id'},
      EVENT_TYPE => {:type => ::Thrift::Types::I32, :name => 'event_type', :default =>       2, :enum_class => ::HelpdeskActivities::EventType},
      SHARD_NAME => {:type => ::Thrift::Types::STRING, :name => 'shard_name'},
      COMPARATOR => {:type => ::Thrift::Types::STRING, :name => 'comparator'},
      RANGE_KEY => {:type => ::Thrift::Types::I64, :name => 'range_key', :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field account_id is unset!') unless @account_id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field object is unset!') unless @object
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field object_id is unset!') unless @object_id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field event_type is unset!') unless @event_type
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field shard_name is unset!') unless @shard_name
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field comparator is unset!') unless @comparator
      unless @event_type.nil? || ::HelpdeskActivities::EventType::VALID_VALUES.include?(@event_type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field event_type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DashboardDetail
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ACCOUNT_ID = 1
    USER_ID = 2
    GROUP_ID = 3
    REQUESTER_ID = 4
    RESPONDER_ID = 5
    EVENT_TYPE = 6
    SHARD_NAME = 7

    FIELDS = {
      ACCOUNT_ID => {:type => ::Thrift::Types::I64, :name => 'account_id'},
      USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id', :optional => true},
      GROUP_ID => {:type => ::Thrift::Types::I64, :name => 'group_id', :optional => true},
      REQUESTER_ID => {:type => ::Thrift::Types::I64, :name => 'requester_id', :optional => true},
      RESPONDER_ID => {:type => ::Thrift::Types::I64, :name => 'responder_id', :optional => true},
      EVENT_TYPE => {:type => ::Thrift::Types::I32, :name => 'event_type', :default =>       1, :enum_class => ::HelpdeskActivities::EventType},
      SHARD_NAME => {:type => ::Thrift::Types::STRING, :name => 'shard_name'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field account_id is unset!') unless @account_id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field event_type is unset!') unless @event_type
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field shard_name is unset!') unless @shard_name
      unless @event_type.nil? || ::HelpdeskActivities::EventType::VALID_VALUES.include?(@event_type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field event_type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TicketData
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ACTOR = 1
    EVENT_TYPE = 2
    PUBLISHED_TIME = 3
    ACCOUNT_ID = 4
    OBJECT = 5
    OBJECT_ID = 6
    CONTENT = 7
    SUMMARY = 8
    EMAIL_TYPE = 9
    RECIPIENT_LIST = 10
    MESSAGE_ID = 11

    FIELDS = {
      ACTOR => {:type => ::Thrift::Types::I64, :name => 'actor'},
      EVENT_TYPE => {:type => ::Thrift::Types::STRING, :name => 'event_type'},
      PUBLISHED_TIME => {:type => ::Thrift::Types::I64, :name => 'published_time'},
      ACCOUNT_ID => {:type => ::Thrift::Types::I64, :name => 'account_id'},
      OBJECT => {:type => ::Thrift::Types::STRING, :name => 'object'},
      OBJECT_ID => {:type => ::Thrift::Types::STRING, :name => 'object_id'},
      CONTENT => {:type => ::Thrift::Types::STRING, :name => 'content'},
      SUMMARY => {:type => ::Thrift::Types::STRING, :name => 'summary', :optional => true},
      EMAIL_TYPE => {:type => ::Thrift::Types::STRING, :name => 'email_type', :optional => true},
      RECIPIENT_LIST => {:type => ::Thrift::Types::STRING, :name => 'recipient_list', :optional => true},
      MESSAGE_ID => {:type => ::Thrift::Types::STRING, :name => 'message_id', :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field actor is unset!') unless @actor
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field event_type is unset!') unless @event_type
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field published_time is unset!') unless @published_time
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field account_id is unset!') unless @account_id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field object is unset!') unless @object
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field object_id is unset!') unless @object_id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field content is unset!') unless @content
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DashboardData
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ACCOUNT_ID = 1
    NOTABLE_ID = 2
    NOTABLE_TYPE = 3
    USER_ID = 4
    GROUP_ID = 5
    RESPONDER_ID = 6
    REQUESTER_ID = 7
    DESCR = 8
    ACTIVITY_DATA = 9

    FIELDS = {
      ACCOUNT_ID => {:type => ::Thrift::Types::I64, :name => 'account_id'},
      NOTABLE_ID => {:type => ::Thrift::Types::I64, :name => 'notable_id'},
      NOTABLE_TYPE => {:type => ::Thrift::Types::STRING, :name => 'notable_type'},
      USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
      GROUP_ID => {:type => ::Thrift::Types::I64, :name => 'group_id', :optional => true},
      RESPONDER_ID => {:type => ::Thrift::Types::I64, :name => 'responder_id', :optional => true},
      REQUESTER_ID => {:type => ::Thrift::Types::I64, :name => 'requester_id', :optional => true},
      DESCR => {:type => ::Thrift::Types::STRING, :name => 'descr', :optional => true},
      ACTIVITY_DATA => {:type => ::Thrift::Types::STRING, :name => 'activity_data', :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field account_id is unset!') unless @account_id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field notable_id is unset!') unless @notable_id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field notable_type is unset!') unless @notable_type
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActivityData
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TICKET_DATA = 1
    TOTAL_COUNT = 2
    QUERY_COUNT = 3
    MEMBERS = 4
    ERROR_MESSAGE = 5

    FIELDS = {
      TICKET_DATA => {:type => ::Thrift::Types::LIST, :name => 'ticket_data', :element => {:type => ::Thrift::Types::STRUCT, :class => ::HelpdeskActivities::TicketData}},
      TOTAL_COUNT => {:type => ::Thrift::Types::I64, :name => 'total_count', :optional => true},
      QUERY_COUNT => {:type => ::Thrift::Types::I64, :name => 'query_count', :optional => true},
      MEMBERS => {:type => ::Thrift::Types::STRING, :name => 'members', :optional => true},
      ERROR_MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'error_message', :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field ticket_data is unset!') unless @ticket_data
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActivityException < ::Thrift::Exception
    include ::Thrift::Struct, ::Thrift::Struct_Union
    def initialize(message=nil)
      super()
      self.message = message
    end

    MESSAGE = 1

    FIELDS = {
      MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DashboardException < ::Thrift::Exception
    include ::Thrift::Struct, ::Thrift::Struct_Union
    def initialize(message=nil)
      super()
      self.message = message
    end

    MESSAGE = 1

    FIELDS = {
      MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end
