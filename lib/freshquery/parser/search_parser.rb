module Freshquery
  module Parser
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class SearchParser < Racc::Parser

module_eval(<<'...end search.y/module_eval...', 'search.y', 20)
  require 'strscan'
  require 'json'

  def parse(str)
    scanner = StringScanner.new str
    @tokens = []
    @record = {}
    make_tokens(scanner)
    @input_array = (1..(@tokens.flatten.length)).step(2).map{|x| @tokens.flatten[x].strip }
    do_parse
  end

  def tokens
    @input_array
  end

  def make_tokens(scanner)
    keyword_x = "([a-zA-Z][a-zA-Z0-9_]*)[\s]*"
    seperator_x = ":"
    relational_x = "(>|<)"
    date_x = "[\s]*'\\d{4}-\\d{2}-\\d{2}'"
    date_time_x = "[\s]*'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z'"
    value_x = "[\s]*([0-9a-zA-Z_\@]+(?:'[0-9a-zA-Z_\@]+)*|'[^']+'|[-]?[0-9]+)"
    integer_x = "[-]?[0-9]+"
    term_x = "(#{value_x}|#{relational_x}[\s]*(#{date_x}|#{date_time_x}|#{integer_x}))"
    regex_string = /(#{keyword_x}#{seperator_x}#{term_x})/
    until scanner.empty?
      case
        when match = scanner.scan(/\([\s]*/)
          @tokens.push [:LPAREN, match.strip]    
        when match = scanner.scan(/[\s]*\)/)
          @tokens.push [:RPAREN, match.strip]
        when match = scanner.scan(/[\s]+(AND|OR)[\s]+/i)
          @tokens.push [match.strip.upcase.to_sym, match.strip.upcase]
        when match = scanner.scan(regex_string) # match any keyword:value
          @tokens.push [:PAIR, match]
        else
          raise ParseError
      end
    end
  end

  def next_token
    @tokens.shift
  end

  def infix_to_postfix(infix)
    postfix = []
    stack = []
    current = 0
    until current == infix.length
      element = infix[current]
      if is_operand?(element)
        postfix << element
      elsif (stack.length == 0 or stack.last == '(') and (is_logical_operator?(element))
        stack << element
      elsif element == '('
        stack << element
      elsif element == ')'
        until stack.last == '(' do
          top = stack.pop
          postfix << top
        end
        stack.pop
      elsif is_logical_operator?(element) and is_logical_operator?(stack.last) and precedence(element) > precedence(stack.last)
        stack << element
      elsif element == stack.last
        postfix << element
      elsif is_logical_operator?(element) and is_logical_operator?(stack.last) and precedence(element) < precedence(stack.last)
        top = stack.pop
        postfix << top
        current -=  1
      end
      current += 1
    end
    until stack.size == 0 do
      top = stack.pop
      postfix << top    
    end
    postfix
  end

  def record
    @record
  end

  def expression_tree(input_array = tokens)
    postfix = infix_to_postfix(input_array)
    stack = []
    postfix.each do |element|
      if is_operand?(element)
        condition = element.split(":")
        keyword = condition[0].strip.downcase
        ope, condition[1] = get_operator(condition[1])
        value = (condition[1, condition.length].join(":")).strip
        if value == "null"
          value = nil
        else
          value = is_integer?(value) ? value.to_i : value
          value = value =~ /\'(.*)\'/ ? value[1,value.length-2] : value
        end
        data = { keyword => value }
        if @record.key?(keyword)
          @record[keyword] << value
        else
          @record[keyword] = [value]
        end
        node = OperandNode.new(data, ope)
        stack << node
      else
        right = stack.pop
        left = stack.pop
        data = element
        node = OperatorNode.new(data, left, right)
        stack << node
      end
    end
    root = stack.pop
  end

  def get_operator(value)
    ope = value[0]
    case
      when [">","<"].include?(ope)
        value[0] = ''
        return [ope, value]
      else
        return [":", value]
    end
  end

  def is_logical_operator?(element)
    ['AND','OR'].include?(element)
  end

  def is_operator?(element)
    is_logical_operator?(element) || ['(',')'].include?(element)
  end

  def is_operand?(element)
    !is_operator?(element)
  end

  def is_integer?(string)
    true if Integer(string) rescue false
  end

  def precedence(operator)
    precedence_hash = { OR: 10, AND: 20 }
    precedence_hash[operator.to_sym]
  end


...end search.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     5,     5,     6,     6,     6,     5,    11,     9,     6,
     8,     7,    14,     9 ]

racc_action_check = [
     0,     9,     8,     0,     9,     8,     6,     7,     3,     6,
     2,     1,    10,    12 ]

racc_action_pointer = [
    -7,    11,     2,    -1,   nil,   nil,    -1,     7,    -5,    -6,
     1,   nil,     4,   nil,   nil ]

racc_action_default = [
    -8,    -8,    -1,    -3,    -5,    -6,    -8,    -8,    -8,    -8,
    -8,    15,    -2,    -4,    -7 ]

racc_goto_table = [
     1,    12,    13,   nil,   nil,   nil,    10 ]

racc_goto_check = [
     1,     3,     4,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,    -7,    -7 ]

racc_goto_default = [
   nil,   nil,     2,     3,     4 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_1,
  3, 14, :_reduce_2,
  1, 14, :_reduce_3,
  3, 15, :_reduce_4,
  1, 15, :_reduce_5,
  1, 16, :_reduce_6,
  3, 16, :_reduce_7 ]

racc_reduce_n = 8

racc_shift_n = 15

racc_token_table = {
  false => 0,
  :error => 1,
  ":" => 2,
  ">" => 3,
  "<" => 4,
  "AND" => 5,
  "OR" => 6,
  :PAIR => 7,
  :OR => 8,
  :AND => 9,
  :LPAREN => 10,
  :RPAREN => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\":\"",
  "\">\"",
  "\"<\"",
  "\"AND\"",
  "\"OR\"",
  "PAIR",
  "OR",
  "AND",
  "LPAREN",
  "RPAREN",
  "$start",
  "expr",
  "or_expr",
  "and_expr",
  "pair" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'search.y', 12)
  def _reduce_1(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'search.y', 13)
  def _reduce_2(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'search.y', 14)
  def _reduce_3(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'search.y', 15)
  def _reduce_4(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'search.y', 16)
  def _reduce_5(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'search.y', 17)
  def _reduce_6(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'search.y', 18)
  def _reduce_7(val, _values, result)
     
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SearchParser


  end
end