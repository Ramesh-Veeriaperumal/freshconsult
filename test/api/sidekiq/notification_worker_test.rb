require_relative '../unit_test_helper'
require 'sidekiq/testing'
require 'faker'

Sidekiq::Testing.fake!

class NotificationWorkerTest < ActionView::TestCase
  def setup
    Account.stubs(:current).returns(Account.first)
    Freshfone::NotificationWorker.clear
  end

  def teardown
    Account.unstub(:current)
    super
  end

  def notif_worker_perform(type)
    Freshfone::NotificationWorker.new.perform({ freshfone_number_id: 1234, ConferenceSid: 1, caller_id: 1 }, Account.first.agents.first.id, type)
  end

  def test_notify_browser_agents
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:find_by_conference_sid).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    notif_worker_perform('browser')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_browser_agents_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Freshfone::CallActions.any_instance.stubs(:handle_failed_incoming_call).returns(true)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:find_by_conference_sid).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).raises(StandardError.new('error'))
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    notif_worker_perform('browser')
  rescue Exception => e
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_mobile_agents
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:find_by_conference_sid).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Call.any_instance.stubs(:number).returns(1234)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    notif_worker_perform('mobile')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_mobile_agents_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Freshfone::CallActions.any_instance.stubs(:handle_failed_incoming_call).returns(true)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:find_by_conference_sid).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).raises(StandardError.new('error'))
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Call.any_instance.stubs(:number).returns(1234)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    notif_worker_perform('mobile')
  rescue Exception => e
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_browser_transfer
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    notif_worker_perform('browser_transfer')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_browser_transfer_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Freshfone::CallActions.any_instance.stubs(:handle_failed_transfer_call).returns(true)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).raises(StandardError.new('error'))
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    notif_worker_perform('browser_transfer')
  rescue Exception => e
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_browser_agent_conference
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:supervisor_controls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:update_details).returns(true)
    Freshfone::Call.any_instance.stubs(:can_add_agent?).returns(true)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    notif_worker_perform('browser_agent_conference')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_browser_agent_conference_conf_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:supervisor_controls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:update_details).raises(StandardError.new('error'))
    Freshfone::Call.any_instance.stubs(:can_add_agent?).returns(true)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::CallActions.any_instance.stubs(:handle_failed_agent_conference).returns(true)
    notif_worker_perform('browser_agent_conference')
  rescue Exception => e
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_mobile_transfer
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(false)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    notif_worker_perform('mobile_transfer')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_mobile_transfer_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::CallActions.any_instance.stubs(:handle_failed_transfer_call).returns(true)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).raises(StandardError.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    notif_worker_perform('mobile_transfer')
  rescue Exception => e
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_external_transfer
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update_call).returns(true)
    Freshfone::Call.any_instance.stubs(:update_external_transfer_call).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:format_external_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    Freshfone::NotificationWorker.new.perform({ freshfone_number_id: 1234, ConferenceSid: 1, caller_id: 1, external_number: '1234', source_agent_id: '1' }, Account.first.agents.first.id, 'external_transfer')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_external_transfer_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::CallActions.any_instance.stubs(:handle_failed_external_transfer_call).returns(true)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update_call).returns(true)
    Freshfone::Call.any_instance.stubs(:update_external_transfer_call).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).raises(StandardError.new('error'))
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:format_external_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    Freshfone::NotificationWorker.new.perform({ freshfone_number_id: 1234, ConferenceSid: 1, caller_id: 1, external_number: '1234', source_agent_id: '1' }, Account.first.agents.first.id, 'external_transfer')
  rescue Exception => e
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_round_robin_agent
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::Call.any_instance.stubs(:update_pinged_agent_ringing_at).returns(true)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    Freshfone::NotificationWorker.new.perform({ freshfone_number_id: 1234, ConferenceSid: 1, caller_id: 1, external_number: '1234', source_agent_id: '1' }, Account.first.agents.first, 'round_robin')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_round_robin_agent_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::Call.any_instance.stubs(:update_pinged_agent_ringing_at).returns(true)
    Freshfone::CallActions.any_instance.stubs(:handle_failed_round_robin_call).returns(true)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).raises(StandardError.new('error'))
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    Freshfone::NotificationWorker.new.perform({ freshfone_number_id: 1234, ConferenceSid: 1, caller_id: 1, external_number: '1234', source_agent_id: '1' }, Account.first.agents.first, 'round_robin')
  rescue Exception => e
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_direct_dial
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_credit).returns(Freshfone::Credit.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update_attributes).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    Freshfone::Credit.any_instance.stubs(:direct_dial_time_limit).returns(50)
    notif_worker_perform('direct_dial')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_direct_dial_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_credit).returns(Freshfone::Credit.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update_attributes).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).raises(StandardError.new('error'))
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    Freshfone::Credit.any_instance.stubs(:direct_dial_time_limit).returns(50)
    Freshfone::CallActions.any_instance.stubs(:handle_failed_direct_dial_call).returns(true)
    notif_worker_perform('direct_dial')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_disconnect_other_agents_cancelled
    Freshfone::NotificationWorker.any_instance.stubs(:get_pinged_agents_call).returns([1234])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_subaccount).returns(Freshfone::Account.new)
    Freshfone::Account.any_instance.stubs(:calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:get).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    notif_worker_perform('cancel_other_agents')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_disconnect_other_agents_cancelled_completed
    Freshfone::NotificationWorker.any_instance.stubs(:get_pinged_agents_call).returns([1234])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_subaccount).returns(Freshfone::Account.new)
    Freshfone::Account.any_instance.stubs(:calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:get).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    notif_worker_perform('complete_other_agents')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_disconnect_other_agents_cancelled_exception
    Freshfone::NotificationWorker.any_instance.stubs(:get_pinged_agents_call).returns([1234])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_subaccount).returns(Freshfone::Account.new)
    Freshfone::Account.any_instance.stubs(:calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:get).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:update).raises(StandardError.new('exception'))
    notif_worker_perform('cancel_other_agents')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_disconnect_other_agents_cancelled_exception_complete
    Freshfone::NotificationWorker.any_instance.stubs(:get_pinged_agents_call).returns([1234])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_subaccount).returns(Freshfone::Account.new)
    Freshfone::Account.any_instance.stubs(:calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:get).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:update).raises(StandardError.new('exception'))
    notif_worker_perform('complete_other_agents')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_mobile_agent_conference
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_credit).returns(Freshfone::Credit.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:supervisor_controls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:can_add_agent?).returns(true)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update_details).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(false)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    Freshfone::Credit.any_instance.stubs(:direct_dial_time_limit).returns(50)
    notif_worker_perform('mobile_agent_conference')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_cancel_agent_conference
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:get_pinged_agents_call).returns([1234])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_subaccount).returns(Freshfone::Account.new)
    Freshfone::Account.any_instance.stubs(:calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:get).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    notif_worker_perform('cancel_agent_conference')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_cancel_agent_conference_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:get_pinged_agents_call).returns([1234])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_subaccount).returns(Freshfone::Account.new)
    Freshfone::Account.any_instance.stubs(:calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:get).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:update).raises(StandardError.new('error'))
    Freshfone::CallActions.any_instance.stubs(:handle_failed_cancel_agent_conference).returns(true)
    notif_worker_perform('cancel_agent_conference')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_browser_warm_transfer
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_credit).returns(Freshfone::Credit.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:supervisor_controls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:can_add_agent?).returns(true)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update_details).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    Freshfone::Credit.any_instance.stubs(:direct_dial_time_limit).returns(50)
    notif_worker_perform('browser_warm_transfer')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_browser_warm_transfer_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_credit).returns(Freshfone::Credit.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:supervisor_controls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:can_add_agent?).returns(true)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update_details).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).raises(StandardError.new('error'))
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    Freshfone::Credit.any_instance.stubs(:direct_dial_time_limit).returns(50)
    Freshfone::CallActions.any_instance.stubs(:handle_failed_warm_transfer).returns(true)
    notif_worker_perform('browser_warm_transfer')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_mobile_warm_transfer
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_credit).returns(Freshfone::Credit.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:supervisor_controls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:can_add_agent?).returns(true)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update_details).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(false)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    Freshfone::Credit.any_instance.stubs(:direct_dial_time_limit).returns(50)
    notif_worker_perform('mobile_warm_transfer')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_mobile_warm_transfer_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Account.any_instance.stubs(:freshfone_credit).returns(Freshfone::Credit.new)
    Account.any_instance.stubs(:freshfone_account).returns(Freshfone::Account.new)
    Account.any_instance.stubs(:freshfone_users).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:find_by_user_id).returns(Freshfone::User.new)
    Freshfone::User.any_instance.stubs(:available_number).returns(1234)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:supervisor_controls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:can_add_agent?).returns(true)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:can_be_connected?).returns(true)
    Freshfone::Call.any_instance.stubs(:freshfone_number).returns(Freshfone::Number.new)
    Freshfone::Call.any_instance.stubs(:children).returns([Freshfone::Call.new])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Freshfone::Number.any_instance.stubs(:ringing_time).returns(10)
    Freshfone::Call.any_instance.stubs(:update_details).returns(true)
    ::Freshfone::Credit.stubs(:call_time_limit).returns(30)
    Freshfone::Telephony.any_instance.stubs(:make_call).raises(StandardError.new('error'))
    Freshfone::NotificationWorker.any_instance.stubs(:add_pinged_agents_call).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:set_browser_sid).returns(true)
    Freshfone::NotificationWorker.any_instance.stubs(:custom_forwarding_enabled?).returns(true)
    Freshfone::Call.any_instance.stubs(:sid).returns(1)
    Freshfone::Call.any_instance.stubs(:meta).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:reload).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:any_agent_accepted?).returns(true)
    Freshfone::Account.any_instance.stubs(:caller_id_enabled?).returns(false)
    Freshfone::Credit.any_instance.stubs(:direct_dial_time_limit).returns(50)
    Freshfone::CallActions.any_instance.stubs(:handle_failed_warm_transfer).returns(true)
    notif_worker_perform('mobile_warm_transfer')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_cancel_warm_transfer
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_subaccount).returns(Freshfone::Account.new)
    Freshfone::Account.any_instance.stubs(:calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:get).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:update).returns(true)
    notif_worker_perform('cancel_warm_transfer')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end

  def test_notify_cancel_warm_transfer_error
    Account.any_instance.stubs(:freshfone_calls).returns(Freshfone::Call.new)
    Freshfone::NotificationWorker.any_instance.stubs(:get_pinged_agents_call).returns([1234])
    Freshfone::Number.any_instance.stubs(:find).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_numbers).returns(Freshfone::Number.new)
    Account.any_instance.stubs(:freshfone_subaccount).returns(Freshfone::Account.new)
    Freshfone::Account.any_instance.stubs(:calls).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:get).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:find).returns(Freshfone::Call.new)
    Freshfone::Call.any_instance.stubs(:update).raises(StandardError.new('error'))
    Freshfone::CallActions.any_instance.stubs(:handle_failed_cancel_agent_conference).returns(true)
    notif_worker_perform('cancel_warm_transfer')
    assert_equal 0, Freshfone::NotificationWorker.jobs.size
  end
end
